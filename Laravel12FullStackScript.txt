================================
💡 Full Stack Laravel 12 with InertiaJS 2 and React  💡
================================
⚡ DAY 1
1.แนวทางการพัฒนาเว็บแอพด้วย Laravel
2.อัพเดทสิ่งใหม่และพื้นฐานใน Laravel 12
3.เตรียมเครื่องมือและการติดตั้ง Laravel 12
---------------------------------
🚀1. การเตรียมเครื่องมือและความพร้อม
💻 XAMPP & PHP 8.2.x
---
php -v

💻 MySQL / MariaDB
---
mysql --version

💻 Node JS 20.x and up
---
node -v
npm -v
ppx -v

💻 Composer
---
composer --version

💻 PostgreSQL 15 and up
---
psql --version

💻 Git
---
git version

💻 VSCode
---
code -v

🚀2.Setup Project
---
</> Server Prerequisites to Install Laravel 12

PHP >= 8.2
Ctype PHP Extension
cURL PHP Extension
DOM PHP Extension
Fileinfo PHP Extension
Filter PHP Extension
Hash PHP Extension
Mbstring PHP Extension
OpenSSL PHP Extension
PCRE PHP Extension
PDO PHP Extension
Session PHP Extension
Tokenizer PHP Extension
XML PHP Extension

การติดตั้ง
---
</> ติดตั้งเวอร์ชั่นล่าสุด (12.x)
💻 composer create-project  laravel/laravel sample-laravel12

หมายเหตุ ติดตั้งระบุเลข Version เฉพาะ
💻 composer create-project laravel/laravel:^12.0 sample-laravel12

</> การรันโปรเจ็กต์
---
💻 php artisan serve
ปกติจะรันอยู่ที่ http://localhost:8000

หากต้องการ run ที่ port อื่น 
💻php artisan serve  --port=9000

</> Laravel Basic Routing
---

</> Basic Routing
---

Route::get('/', function () {
    return 'Hello World!';
});

Route::get('about', function(){
    return 'My about page';
});

---------------------------------
⚡ DAY 2
---------------------------------
สร้างโปรเจ็กต์ laravel 12
---
</> ติดตั้งเวอร์ชั่นล่าสุด (12.x)
💻 composer create-project  laravel/laravel basic-laravel12

ถ้าต้องการกำหนดเลข version
💻 composer create-project  laravel/laravel:^12.0 basic-laravel12

</> เปิดเข้า vscode
💻 code basic-laravel12 -r

</> ติดตั้ง nodejs library
💻 npm i

</> แก้ไข package.json
---
"dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"npm run dev\" --names=server,queue,logs,vite"
        ]

</> คำสั่ง run project laravel
💻 composer dev

</> Routing with Parameters
---
Route::get('user/{id}', function ($id) {
    return 'User:' . $id;
});

Route::get('posts/{post}/comments/{comment}', function ($postID, $commentID) {
    return 'Post:' . $postID . '<br>Comment:' . $commentID;
});

Route::get('member/{name?}', function ($name = null) {
    return 'Hello' . $name;
});

</> Regular Expression Constraints
---
Route::get('category/{name}', function ($name) {
    return $name;
})->where('name', '[A-Za-z]+');

Route::get('group/{id}', function ($id) {
    return $id;
})->where('id','[0-9]+');

Route::get('product/{id}/{name}', function ($id, $name) {
    return 'Product ID:'.$id.'<br>Product name:'.$name;
})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);

</> Named Routes
---
Route::get('guest/showroom/data/{name?}',function($name=null){
    return'Hello'.$name;
})->name('guestprofile');

Route post,put,delete
---
Route::post('user/profile',function(){
    return'POST';
});

Route::put('user/profile',function(){
    return'PUT';
});

Route::delete('user/profile',function(){
    return'DELETE';
});

</> พื้นฐานการทำงานกับ Controller ใน Laravel 12
---
การสร้าง Controller ใหม่
php artisan make:controller HomeController

</> การเรียกใช้งาน Controller ใน routes (web.php)
---
Method 1:

Route::get(
  'profile’,
  'App\Http\Controllers\HomeController@showprofile’
);

Method 2:

use App\Http\Controllers\HomeController;

Route::get(
  'profile’,
  [HomeController::class,'showprofile’]
);

</> Route Prefixes
---
Route::group(['prefix' => 'admin'], function () {
    Route::get('users', function ()    {
        // Matches The "/admin/users" URL
    });
});

Route::group(['prefix' => 'accounts/{account_id}'], function () {
    Route::get('detail', function ($account_id)    {
        // Matches The accounts/{account_id}/detail URL
    });
});


ตัวอย่างการสร้าง View ด้วย php artisan
---
php artisan make:view home

🚀3.PostgreSQL/MySQL Connect

</> การทำงานกับฐานข้อมูล
---
เชื่อมต่อฐานข้อมูล PostgreSQL
แก้ไขไฟล์ .env
---
# SQLite
# DB_CONNECTION=sqlite

# MySQL
# DB_CONNECTION=mysql
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

# PostgreSQL
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=samplelaraveldb
DB_USERNAME=postgres
DB_PASSWORD=123456

</> คำสั่ง Running Migrations
---
💻 php artisan migrate

</> สรุปคำสั่ง สร้าง migration และ db:seed พร้อมกัน
---
💻 php artisan migrate:fresh --seed

</> การสร้าง API ใน Laravel 12
---
ติดตั้ง api
---
💻 php artisan install:api

🚀4.API Controller & Methods

</> ทดสอบเขียน api ที่ไฟล์ routes/api.php
---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

// Route::get('/user', function (Request $request) {
//     return $request->user();
// })->middleware('auth:sanctum');

// กำหนดตัวแปร $users
$users = [
    [
        'name' => 'John Doe',
        'email' => 'john@email.com',
    ],
    [
        'name' => 'Jane Doe',
        'email' => 'jane@email.com',
    ]
];

// GET /api/user
Route::get('/user',  function (Request $request) use ($users){
    return $users;
});

// POST /api/user
// Payload: { "name": "John Doe", "email": "john@email.com"}
Route::post('/user', function (Request $request)  use ($users){
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Add the new user to the users array
    $users[] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// PUT /api/user/1
// Payload: { "name": "Jack Doe", "email": "jack@email.com"}
Route::put('/user/{id}', function (Request $request, $id) use ($users) {
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Update the user with the given id
    $users[$id] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// DELETE /api/user/1
Route::delete('/user/{id}', function (Request $request, $id) use ($users) {
    // Remove the user with the given id
    unset($users[$id]);

    // Return the name and email
    return $users;
});

---------------------------------
⚡ DAY 3
---------------------------------
สร้างโปรเจ็กต์ laravel 12
---
ติดตั้งผ่าน laravel installer
---
laravel new inertia-react-app

Which starter kit would you like to install? [None]:
  [none    ] None
  [react   ] React   
  [vue     ] Vue     
  [livewire] Livewire
 > none


Would you like to run npm install and npm run build? (yes/no) [yes]:
 >
yes

ติดตั้งผ่าน composer
---
</> ติดตั้งเวอร์ชั่นล่าสุด (12.x)
💻 composer create-project laravel/laravel inertia-react-app

ถ้าต้องการกำหนดเลข version
💻 composer create-project  laravel/laravel:^12.0 inertia-react-app

</> เปิดเข้า vscode
💻 code inertia-react-app -r

</> ติดตั้ง nodejs library
💻 npm i

ติดตั้ง inertia server side
---
💻  composer require inertiajs/inertia-laravel

สร้างไฟล์ app.blade.php
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    @vite('resources/js/app.js')
    @inertiaHead
</head>
<body>
    @inertia
</body>
</html>

สร้าง middleware
---
php artisan inertia:middleware

แก้ไขไฟล์ boostrap/app.php
---
->withMiddleware(function (Middleware $middleware) {
        $middleware->web(append: [
            HandleInertiaRequests::class,
        ]);
    })

---------------------------------
⚡ DAY 4
---------------------------------
4.Laravel 12 ทำงานกับฐานข้อมูล MySQL/PostgreSQL
5.พื้นฐาน Inertia.js 2 กับ React 19 ด้วย TypeScript

Step 1: Clone Project จาก Github
---
git clone https://github.com/iamsamitdev/basic-laravel12-day3

Step 2: UPDATE .env สำหรับการเชื่อมต่อฐานข้อมูล Mysql/Mariadb
---
# MariaDB
DB_CONNECTION=mariadb
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=samplelaraveldb
DB_USERNAME=root
DB_PASSWORD=

Step 3: ติดตั้ง Dependency และสั่ง Migrate Database
---
ติดตั้ง library ของ Laravel
---
composer install

ติดตั้ง library ของ NodeJS / Tailwind / React
---
npm install

คำสั่ง Migrate Database
---
php artisan migrate

คำสั่ง Seed Database
---
php artisan db:seed

Step 4: สร้าง AuthController
---
php artisan make:controller AuthController

แก้ไขไฟล์ app\Http\Controller\AuthController.php ดังนี้
---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    // ฟังก์ชันแสดงฟอร์มลงทะเบียน
    public function showRegister() {
        // ส่งข้อมูลไปยัง view ชื่อ register.blade.php
        return view('auth.register');
    }

    // ฟังก์ชัน Submit ฟอร์มลงทะเบียนผู้ใช้
    public function register(Request $request) {
        // ตรวจสอบข้อมูลที่ส่งมาจากฟอร์ม
        $request->validate([
            'name' => 'required|max:64',
            'email' => 'required|email|max:64|unique:users',
            'phone' => 'nullable|max:16',
            'address' => 'nullable',
            'password' => 'required|min:6|max:64|confirmed'
        ], [
            'name.required' => 'กรุณากรอกชื่อ',
            'name.max' => 'ชื่อต้องไม่เกิน 64 ตัวอักษร',
            'email.required' => 'กรุณากรอกอีเมล',
            'email.email' => 'รูปแบบอีเมลไม่ถูกต้อง',
            'email.max' => 'อีเมลต้องไม่เกิน 64 ตัวอักษร',
            'email.unique' => 'อีเมลนี้ถูกใช้งานแล้ว',
            'phone.max' => 'เบอร์โทรศัพท์ต้องไม่เกิน 16 ตัวอักษร',
            'password.required' => 'กรุณากรอกรหัสผ่าน',
            'password.min' => 'รหัสผ่านต้องมีอย่างน้อย 6 ตัวอักษร',
            'password.max' => 'รหัสผ่านต้องไม่เกิน 64 ตัวอักษร',
            'password.confirmed' => 'ยืนยันรหัสผ่านไม่ตรงกัน'
        ]);

        // สร้างผู้ใช้ใหม่
        User::create([
            'name' => $request->name,
            'email' => $request->email,
            'phone' => $request->phone,
            'address' => $request->address,
            'password' => bcrypt($request->password),
            'email_verified_at' => now()
        ]);

        // ส่งผู้ใช้ไปยังหน้าล็อกอินพร้อมกับข้อความแจ้งเตือน
        return redirect()->route('login')->with('success', 'ลงทะเบียนสำเร็จ! กรุณาเข้าสู่ระบบ');
    }

    // Login function
    public function showLogin() {
        // ส่งข้อมูลไปยัง view ชื่อ login.blade.php
        return view('auth.login');
    }

    // ฟังก์ชัน Submit ฟอร์ม login
    public function login(Request $request) {
        
        // ตรวจสอบข้อมูลที่ส่งมาจากฟอร์ม
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ], [
            'email.required' => 'กรุณากรอกอีเมล',
            'email.email' => 'รูปแบบอีเมลไม่ถูกต้อง',
            'password.required' => 'กรุณากรอกรหัสผ่าน'
        ]);

        // ตรวจสอบข้อมูลการล็อกอิน
        if(Auth::attempt($credentials)) {
            // ล็อกอินสำเร็จ ส่งผู้ใช้ไปยังหน้า Dashboard
            return redirect()->route('dashboard');
        }

        // ล็อกอินไม่สำเร็จ ส่งผู้ใช้กลับไปยังหน้าล็อกอินพร้อมกับข้อความแจ้งเตือน
        return back()->withErrors(['email' => 'อีเมลหรือรหัสผ่านไม่ถูกต้อง']);
    }

    // ฟังก์ชันแสดงหน้าแดชบอร์ด
    public function dashboard()
    {
        // ส่งข้อมูลผู้ใช้ไปยัง view ที่ชื่อ dashboard.blade.php
        return view('dashboard');
    }

    public function stock()
    {
        // ส่งข้อมูลผู้ใช้ไปยัง view ที่ชื่อ stock.blade.php
        return view('stock');
    }


    public function order()
    {
        // ส่งข้อมูลผู้ใช้ไปยัง view ที่ชื่อ order.blade.php
        return view('order');
    }

    public function report()
    {
        // ส่งข้อมูลผู้ใช้ไปยัง view ที่ชื่อ report.blade.php
        return view('report');
    }

    public function profile()
    {
        // ส่งข้อมูลผู้ใช้ไปยัง view ที่ชื่อ profile.blade.php
        return view('profile');
    }


    public function setting()
    {
        // ส่งข้อมูลผู้ใช้ไปยัง view ที่ชื่อ setting.blade.php
        return view('setting');
    }

    // ฟังก์ชันออกจากระบบ
    public function logout()
    {
        // ออกจากระบบ
        Auth::logout();

        // ส่งผู้ใช้ไปยังหน้าล็อกอิน
        return redirect()->route('login');
    }
}

Step 5: สร้าง Layout "auth.blade.php"
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@section('title') | Laravel @show</title>

    @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    @endif
</head>
<body>
    <main>
        @yield('content')
    </main>
</body>
</html>

Step 6: แก้ไขไฟล์ web.php สำหรับ route
---
// Auth Controller (Login)
Route::get('login', [AuthController::class, 'showLogin'])->name('login');
Route::post('/login', [AuthController::class, 'login']);

Step 7: สร้าง View "login.blade.php" และ "register.blade.php"
---
resources\views\auth\login.blade.php
---
@extends('layouts.auth')
@section('title')
    Login @parent
@endsection

@section('content')
    <div class="min-h-screen flex">
        <!-- Left Column - Image/Banner -->
        <div class="hidden lg:flex lg:w-1/2 bg-blue-600 relative">
            <!-- Back to Home Link -->
            <div class="absolute top-4 left-4">
                <a href="{{ route('home') }}" class="inline-flex items-center text-sm text-white hover:text-gray-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    Back to Home
                </a>
            </div>
            <div class="flex items-center justify-center w-full h-full">
                <div class="text-center text-white">
                    <h1 class="text-4xl font-bold mb-4">Welcome Back!</h1>
                    <p class="text-xl">Login to access your account</p>
                </div>
            </div>
        </div>

        <!-- Right Column - Login Form -->
        <div class="w-full lg:w-1/2 flex items-center justify-center px-8 py-12 sm:px-12 lg:px-16">
            <div class="w-full max-w-md">
                <h2 class="text-3xl font-bold text-gray-900 mb-8">Sign In</h2>

                @if (session('success'))
                    <div class="mb-4 p-4 rounded-lg bg-green-100 text-green-700">
                        {{ session('success') }}
                    </div>
                @endif

                @if ($errors->any())
                    <div class="mb-4 p-4 rounded-lg bg-red-100 text-red-700">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <form action="{{ route('login') }}" method="POST" class="space-y-6">
                    @csrf

                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                        <input type="text" name="email" id="email"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('email') border-red-500 @enderror"
                            placeholder="Enter your email" value="{{ old('email') }}">
                        @error('email')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                        <input type="password" name="password" id="password"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                            @error('password') border-red-500 @enderror placeholder="Enter your password">
                        @error('password')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <button type="submit"
                        class="w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition duration-200">
                        Sign In
                    </button>
                </form>

                <p class="mt-8 text-center text-sm text-gray-600">
                    Don't have an account?
                    <a href="{{ route('register') }}" class="font-medium text-blue-600 hover:text-blue-500">
                        Register here
                    </a>
                </p>
            </div>
        </div>
    </div>
@endsection

---
resources\views\auth\register.blade.php
---
@extends('layouts.auth')
@section('title')
    Register @parent
@endsection

@section('content')
    <div class="min-h-screen flex">
        <!-- Left Column - Image/Banner -->
        <div class="hidden lg:flex lg:w-1/2 bg-blue-600 relative">
            <!-- Back to Home Link -->
            <div class="absolute top-4 left-4">
                <a href="{{ route('home') }}" class="inline-flex items-center text-sm text-white hover:text-gray-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    Back to Home
                </a>
            </div>
            <div class="flex items-center justify-center w-full h-full">
                <div class="text-center text-white">
                    <h1 class="text-4xl font-bold mb-4">Create Account</h1>
                    <p class="text-xl">Join us today!</p>
                </div>
            </div>
        </div>

        <!-- Right Column - Register Form -->
        <div class="w-full lg:w-1/2 flex items-center justify-center px-8 py-12 sm:px-12 lg:px-16">
            <div class="w-full max-w-md">
                <h2 class="text-3xl font-bold text-gray-900 mb-8">Sign Up</h2>

                @if ($errors->any())
                    <div class="mb-4 p-4 rounded-lg bg-red-100 text-red-700">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <form action="{{ route('register') }}" method="POST" class="space-y-4">
                    @csrf

                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                        <input type="text" name="name" id="name" maxlength="64"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('name') border-red-500 @enderror"
                            placeholder="Enter your name" value="{{ old('name') }}">
                        @error('name')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                        <input type="text" name="email" id="email" maxlength="64"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('email') border-red-500 @enderror"
                            placeholder="Enter your email" value="{{ old('email') }}">
                        @error('email')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
                        <input type="text" name="phone" id="phone" maxlength="16"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('phone') border-red-500 @enderror"
                            placeholder="Enter your phone number" value="{{ old('phone') }}">
                        @error('phone')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label for="address" class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                        <textarea name="address" id="address" rows="3"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('address') border-red-500 @enderror"
                            placeholder="Enter your address">{{ old('address') }}</textarea>
                        @error('address')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                        <input type="password" name="password" id="password" maxlength="64"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('password') border-red-500 @enderror"
                            placeholder="Create a password">
                        @error('password')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label for="password_confirmation" class="block text-sm font-medium text-gray-700 mb-2">Confirm
                            Password</label>
                        <input type="password" name="password_confirmation" id="password_confirmation" maxlength="64"
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 @error('password_confirmation') border-red-500 @enderror"
                            placeholder="Confirm your password">
                        @error('password_confirmation')
                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                        @enderror
                    </div>

                    <button type="submit"
                        class="w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition duration-200 mt-6">
                        Create Account
                    </button>
                </form>

                <p class="mt-8 text-center text-sm text-gray-600">
                    Already have an account?
                    <a href="{{ route('login') }}" class="font-medium text-blue-600 hover:text-blue-500">
                        Login here
                    </a>
                </p>
            </div>
        </div>
    </div>
@endsection


Step 8: สร้างไฟล์ "navbar.blade.php" และ "sidebar.blade.php"
---
resources\views\includes\navbar.blade.php
---
<nav class="bg-white shadow-sm fixed top-0 left-0 w-full z-50">
    <div class="mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex h-16 justify-between">
            <div class="flex">
                <!-- Mobile menu button -->
                <button id="mobile-menu-button" class="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:outline-none">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>

                <!-- Logo -->
                <div class="flex-shrink-0 flex items-center ml-4 lg:ml-0">
                    <a href="#" class="text-xl font-bold text-blue-600">
                        Backend
                    </a>
                </div>
            </div>

            <!-- Right Navigation -->
            <div class="flex items-center">
                <div class="relative ml-3 flex items-center">
                    <div class="flex items-center">
                        <button type="button" class="flex items-center text-sm rounded-full focus:outline-none" id="user-menu-button">
                            <span class="mr-3 text-gray-700">John Sena</span>
                            <img class="h-8 w-8 rounded-full border-2 border-gray-100" src="https://ui-avatars.com/api/?name=johnsena&background=random" alt="John Sena">
                        </button>
                    </div>

                    <form action="{{ route('logout') }}" method="POST" class="ml-4">
                        @csrf
                        <button type="submit" class="text-gray-600 hover:text-gray-900 hover:bg-gray-100 px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 cursor-pointer">
                            Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</nav>

---
resources\views\includes\sidebar.blade.php
---
<aside id="sidebar" class="w-64 flex-shrink-0 fixed h-full top-16 left-0 z-40 transition-transform duration-200 ease-in-out lg:translate-x-0 -translate-x-full">
    <div class="h-full bg-white shadow-sm overflow-y-auto">
        <nav class="mt-5 px-2">
            <div class="space-y-1">
                <!-- Dashboard -->
                <a href="{{ route('dashboard') }}" class="group flex items-center px-2 py-2 text-base font-medium rounded-md {{ request()->routeIs('dashboard') ? 'bg-blue-100 text-blue-900' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}">
                    <svg class="mr-4 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                    </svg>
                    Dashboard
                </a>

                <!-- Stock -->
                <a href="{{route('stock')}}" class="group flex items-center px-2 py-2 text-base font-medium rounded-md {{ request()->routeIs('stock') ? 'bg-blue-100 text-blue-900' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}">
                    <svg class="mr-4 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                    </svg>
                    Stock
                </a>

                <!-- Order -->
                <a href="{{route('order')}}" class="group flex items-center px-2 py-2 text-base font-medium rounded-md {{ request()->routeIs('order') ? 'bg-blue-100 text-blue-900' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}">
                    <svg class="mr-4 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                    </svg>
                    Order
                </a>

                <!-- Report -->
                <a href="{{route('report')}}" class="group flex items-center px-2 py-2 text-base font-medium rounded-md {{ request()->routeIs('report') ? 'bg-blue-100 text-blue-900' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}">
                    <svg class="mr-4 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Report
                </a>

                <!-- Profile -->
                <a href="{{route('profile')}}" class="group flex items-center px-2 py-2 text-base font-medium rounded-md {{ request()->routeIs('profile') ? 'bg-blue-100 text-blue-900' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}">
                    <svg class="mr-4 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    Profile
                </a>

                <!-- Settings -->
                <a href="{{route('setting')}}" class="group flex items-center px-2 py-2 text-base font-medium rounded-md {{ request()->routeIs('setting') ? 'bg-blue-100 text-blue-900' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900' }}">
                    <svg class="mr-4 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Settings
                </a>
            </div>
        </nav>
    </div>
</aside>

Step 9: สร้าง Layout "backend.blade.php"
---
resources\views\layouts\backend.blade.php
---
<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@section('title') | Backend Laravel @show</title>

    @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    @endif

    @yield('styles')
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex flex-col">
        
        @include('includes.navbar')
        
        <div class="flex flex-1">
            @include('includes.sidebar')
            
            <main class="flex-1 overflow-x-hidden overflow-y-auto mt-8 bg-gray-100 lg:ml-64">
                <div class="container mx-auto px-6 py-8">
                    
                    @if(session('success'))
                        <div class="mb-4 p-4 rounded-lg bg-green-100 text-green-700">
                            {{ session('success') }}
                        </div>
                    @endif
                    
                    @yield('content')
                </div>
            </main>
        </div>
    </div>

    <script>
        // Toggle mobile menu
        document.getElementById('mobile-menu-button')?.addEventListener('click', function() {
            document.getElementById('sidebar')?.classList.toggle('-translate-x-full');
        });
    </script>

    @yield('scripts')
</body>
</html>

Step 9: สร้างไฟล์ View "dashboard.blade.php", "stock.blade.php", "order.blade.php", "report.blade.php", "profile.blade.php", "setting.blade.php"
---

Step 10: ทำการ Redirect หน้าแรกเข้า /home
---
Route::get('/', fn() => redirect()->route('home')); 


สร้าง Laravel + inertia + React 
ด้วย Starter kits
---
Step 1: ตรวจสอบ laravel installer ในเครื่องก่อน
---
laravel --version

Step 2: คำสั่งสร้างโปรเจ็กต์ใหม่ด้วย Starter kit
---
laravel new demo-inertia-react

  _                               _
  | |                             | |
  | |     __ _ _ __ __ ___   _____| |
  | |    / _` |  __/ _` \ \ / / _ \ |
  | |___| (_| | | | (_| |\ V /  __/ |
  |______\__,_|_|  \__,_| \_/ \___|_|


 Which starter kit would you like to install? [None]:
  [none    ] None
  [react   ] React
  [vue     ] Vue
  [livewire] Livewire
 > react

 Which authentication provider do you prefer? [Laravel's built-in authentication]:
  [laravel] Laravel's built-in authentication
  [workos ] WorkOS (Requires WorkOS account)
 > laravel

 Which testing framework do you prefer? [Pest]:
  [0] Pest
  [1] PHPUnit
 > 0


Step 3: ตรวจสอบ composer ในเครื่องก่อน
---
composer --version

Step 4: คำสั่งสร้างโปรเจ็กต์ใหม่ด้วย Composer
---
composer create-project laravel/laravel basic-inertia-react

Step 5: ทดสอบรันโปรเจ็กต์
---
composer dev

Step 6: ติดตั้ง Inertia ฝั่ง Server-side (Laravel)
---
composer require inertiajs/inertia-laravel

Step 7: แก้ไขไฟล์ welcome.blade.php เป็น "app.blade.php"
---
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
    <title inertia>{{ config('app.name', 'Laravel') }}</title>
    @viteReactRefresh
    @vite(['resources/js/app.tsx', "resources/js/pages/{$page['component']}.tsx"])
    @inertiaHead
  </head>
  <body>
    @inertia
  </body>
</html>

Step 8: เพิ่ม Middleware สำหรับ Inertia
---
php artisan inertia:middleware


Step 9: Config Middleware ที่ไฟล์ "app.php"
---
\bootstrap\app.php
---
use App\Http\Middleware\HandleInertiaRequests;

->withMiddleware(function (Middleware $middleware) {
        $middleware->web(append: [
            HandleInertiaRequests::class,
        ]);
    })


Step 10: ติดตั้งฝั่ง Client-side
---
npm install @inertiajs/react
npm install react
npm install react-dom
npm install typescript

npm install @types/react -D
npm install @types/react-dom -D
npm install @vitejs/plugin-react -D

Step 11: แก้ไฟล์ vite.config.js
---
import react from '@vitejs/plugin-react'
import laravel from 'laravel-vite-plugin'
import { defineConfig } from 'vite'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.tsx'],
            refresh: true,
        }),
        react(),
        tailwindcss(),
    ],
    esbuild: {
        jsx: 'automatic',
    },
})

Step: 12: สร้างหน้าหลักของ Inertia ที่ไฟล์ (app.tsx)
---
\resources\js\app.tsx
---
import '../css/app.css'

import { createInertiaApp } from '@inertiajs/react'
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers'
import { createRoot } from 'react-dom/client'

// ประกาศ type สำหรับ Vite
declare global {
  interface ImportMeta {
    env: {
      [key: string]: string | boolean | undefined
      VITE_APP_NAME?: string
    }
    glob: (path: string) => Record<string, () => Promise<unknown>>
  }
}

const appName = import.meta.env.VITE_APP_NAME || 'Laravel'

createInertiaApp({
  title: (title) => `${title} - ${appName}`,
  resolve: (name) => resolvePageComponent(`./pages/${name}.tsx`, import.meta.glob('./pages/**/*.tsx')),
  setup({ el, App, props }) {
    const root = createRoot(el);

    root.render(<App {...props} />)
  },
  progress: {
    color: '#4B5563',
  },
})

Step 13: ทำการสร้างไฟล์ tsconfig.json
---
npx tsc --init --rootDir .

แก้ไขไฟล์ tsconfig.json ดังนี้
---
{
  "compilerOptions": {
      "target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
      "module": "ESNext" /* Specify what module code is generated. */,
      "moduleResolution": "bundler" /* Specify how TypeScript looks up a file from a given module specifier. */,
      "allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
      "noEmit": true /* Disable emitting files from a compilation. */,
      "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
      "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
      "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
      "strict": true /* Enable all strict type-checking options. */,
      "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
      "skipLibCheck": true /* Skip type checking all .d.ts files. */,
      "baseUrl": ".",
      "paths": {
          "@/*": ["./resources/js/*"],
      },
      "jsx": "react-jsx"
  },
  "include": ["resources/js/**/*.ts", "resources/js/**/*.tsx"],
  "exclude": ["node_modules", "public", "resources/css"]
}

Step 14: สร้างไฟล์ welcome.tsx และ about.tsx
---
resources\js\pages\welcome.tsx
---
import { Link } from '@inertiajs/react'

export default function Welcome() {
  return (
    <div>
      <div className='text-3xl text-green-600'>Welcome Page</div>
      <Link href="/about">About</Link>
    </div>
  )
}

---
resources\js\pages\about.tsx
---
import { Link } from '@inertiajs/react'

export default function About() {
  return (
    <div>
      <div className='text-3xl text-yellow-600'>About Page</div>
      <Link href="/">Home</Link>
    </div>
  )
}

Step 15: แก้ไขไฟล์ route (web.php)
---
\routes\web.php
---
<?php

use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

Route::get('/', function () {
    return Inertia::render('welcome');
})->name('home');

Route::get('/about', function () {
    return Inertia::render('about');
})->name('about');



---------------------------------
⚡ DAY 5
---------------------------------
5.พื้นฐาน Inertia.js 2 กับ React 19 ด้วย TypeScript (ต่อ)
6.การทำงานกับ Tailwind CSS 4.0 และ ShadCN/UI
7.ระบบ Authentication & Authorization

---
การสร้าง Layout ใน Inertia + React
---

Step 1: เปิดโปรเจ็กต์เดิมที่ทำไว้ "basic-inertia-react" แล้วทดสอบรันโปรเจ็กต์
---
composer dev

Step 2: สร้างโฟลเดอร์ layouts ไว้ใน resources\js
---
mkdir resources\js\layouts

Step 3: สร้างไฟล์ "MainLayout.tsx" เข้าไปในโฟลเดอร์ layouts
---
import React, { ReactNode } from 'react'

// Interface สำหรับรับค่า props
interface MainLayoutProps {
    children: ReactNode
    title?: string
}

export default function MainLayout({ children, title }: MainLayoutProps) {
  return (
    <div>MainLayout</div>
  )
}

Step 4: สร้าง Navbar และ Footer ไว้ในโฟลเดอร์ resources\js\components
---
mkdir resources\js\components

Navbar.tsx
---
import React from 'react'

export default function Navbar() {
  return (
    <div>Navbar</div>
  )
}

Footer.tsx
---
import React from 'react'

export default function Footer() {
  return (
    <div>Footer</div>
  )
}

Step 5: รวม Navbar และ Footer ไปยังไฟล์ MainLayout.tsx
---
import Footer from '@/components/Footer'
import Navbar from '@/components/NavBar'
import { Head } from '@inertiajs/react'
import { ReactNode } from 'react'

// Interface สำหรับรับค่า props
interface MainLayoutProps {
    children: ReactNode
    title?: string
}

export default function MainLayout({ children, title }: MainLayoutProps) {
  return (
    <div className="flex flex-col min-h-screen">

        <Head title={title || 'หน้าหลัก'} />
        
        <Navbar />

        <main className="flex-grow">
            {children}
        </main>

        <Footer />
        
    </div>
  )
}


Step 6: นำ Layout "MainLayout.tsx" ไปใช้ที่หน้า pages "welcome.tsx" และ "about.tsx"
---
welcome.tsx
---
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

export default function Welcome() {
  return (
    <MainLayout title='หน้าหลัก'>
      <div className='text-3xl text-green-600'>Welcome Page</div>
      <Link href="/about">About</Link>
    </MainLayout>
  )
}

---
about.tsx
---
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

export default function About() {
  return (
    <MainLayout title='เกี่ยวกับเรา'>
      <div className='text-3xl text-yellow-600'>About Page</div>
      <Link href="/">Home</Link>
    </MainLayout>
  )
}


Step 7: แก้ไข Navbar ใส่ Tailwind CSS เข้าไปให้งามๆ
---
Navbar.tsx
---
import { Link } from '@inertiajs/react'

export default function Navbar() {
  return (
    <nav className="bg-white shadow-md py-4">
        <div className="container mx-auto px-4 flex justify-between items-center">
            <div className="text-xl font-bold text-indigo-600">
                <Link href="/">Laravel React</Link>
            </div>
            <div className="flex items-center">
                <ul className="flex space-x-6 mr-6">
                    <li>
                        <Link 
                            href="/" 
                            className="text-gray-700 hover:text-indigo-600 transition-colors"
                        >
                            หน้าแรก
                        </Link>
                    </li>
                    <li>
                        <Link 
                            href="/about" 
                            className="text-gray-700 hover:text-indigo-600 transition-colors"
                        >
                            เกี่ยวกับเรา
                    </Link>
                    </li>
                </ul>
                <div className="flex items-center space-x-3">
                    <Link
                        href="/login"
                        className="text-gray-700 hover:text-indigo-600 transition-colors"
                    >
                        เข้าสู่ระบบ
                    </Link>
                    <Link
                        href="/register"
                        className="px-3 py-1.5 rounded bg-indigo-600 text-white hover:bg-indigo-700 transition-colors"
                    >
                        ลงทะเบียน
                    </Link>
                </div>
            </div>
        </div>
    </nav>
  )
}

Footer.tsx
---
import { Link } from '@inertiajs/react'

export default function Footer() {
  return (
    <footer className="bg-gray-800 text-white py-8 mt-auto">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 className="text-xl font-bold mb-4">แอปพลิเคชันของคุณ</h3>
            <p className="text-gray-300">
              แอปพลิเคชันที่สร้างด้วย Laravel, Inertia และ React ที่มีประสิทธิภาพและใช้งานง่าย
            </p>
          </div>
          
          <div>
            <h3 className="text-xl font-bold mb-4">ลิงก์ด่วน</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/" className="text-gray-300 hover:text-white transition-colors">
                  หน้าแรก
                </Link>
              </li>
              <li>
                <Link href="/about" className="text-gray-300 hover:text-white transition-colors">
                  เกี่ยวกับเรา
                </Link>
              </li>
              <li>
                <Link href="/dashboard" className="text-gray-300 hover:text-white transition-colors">
                  แดชบอร์ด
                </Link>
              </li>
            </ul>
          </div>
          
          <div>
            <h3 className="text-xl font-bold mb-4">ติดต่อเรา</h3>
            <address className="text-gray-300 not-italic">
              <p>บริษัท แอปพลิเคชันของคุณ จำกัด</p>
              <p>123 ถนนตัวอย่าง</p>
              <p>กรุงเทพฯ 10000</p>
              <p>อีเมล: info@yourapplication.com</p>
            </address>
          </div>
        </div>
        
        <div className="border-t border-gray-700 mt-8 pt-6 text-center text-gray-400">
          &copy; {new Date().getFullYear()} แอปพลิเคชันของคุณ - สงวนลิขสิทธิ์
        </div>
      </div>
    </footer>
  )
}

Step 8: ปรับหน้า welcome.tsx และ about.tsx ให้สวยงาม
---
welcome.tsx
----
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

export default function Welcome() {
  return (
    <MainLayout title='หน้าหลัก'>
      <div className="bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 py-16 px-4">
        <div className="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 md:p-12 text-center">
          <h1 className="text-4xl leading-20 font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-pink-600 mb-6">
            ยินดีต้อนรับสู่ Laravel Inertia React
          </h1>
          <p className="text-gray-600 text-lg md:text-xl mb-4">
            เริ่มต้นการพัฒนาแอปพลิเคชันของคุณด้วย Laravel, Inertia และ React
          </p>
          <p className="text-gray-500 mb-8">
            เวอร์ชัน 1 | เวลาเซิร์ฟเวอร์: 21:00 น.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
              <div className="text-4xl mb-4">🚀</div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">Sample</h3>
              <p className="text-gray-600">ประสิทธิภาพที่เหนือชั้นด้วยเทคโนโลยีล่าสุด</p>
          </div>
          <div className="bg-indigo-100 rounded-xl p-4 mb-8">
              <p className="text-gray-700">
                  ทีมงานที่มีประสบการณ์ของเรา <span className="font-bold text-indigo-600">5 คน</span> พร้อมให้บริการคุณ
              </p>
          </div>
          <div className="flex flex-col md:flex-row gap-4 justify-center">
              <Link 
                  href="/about" 
                  className="px-8 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
              >
                  เกี่ยวกับเรา
              </Link>
              
              <Link 
                  href="/dashboard" 
                  className="px-8 py-3 bg-white text-indigo-600 font-semibold rounded-full shadow-lg border border-indigo-200 hover:shadow-xl transition-all transform hover:-translate-y-1"
              >
                  แดชบอร์ด
              </Link>
          </div>
        </div>
      </div>
    </MainLayout>
  )
}

---
about.tsx
---
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

export default function About() {
  return (
    <MainLayout title='เกี่ยวกับเรา'>
      <div className="bg-gradient-to-br from-purple-500 via-pink-500 to-orange-500 py-16 px-4">
        <div className="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 md:p-12">
          <h1 className="text-4xl leading-24 md:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-orange-600 mb-6 text-center">
            เกี่ยวกับเรา
          </h1>
          <div className="mb-10">
            <div className="flex flex-col md:flex-row gap-8 items-center mb-12">
              <div className="w-full md:w-1/3">
                <div className="aspect-square bg-gradient-to-br from-purple-200 to-pink-200 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-8xl">🌟</span>
                </div>
              </div>
              
              <div className="w-full md:w-2/3">
                <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-4">วิสัยทัศน์ของเรา</h2>
                <p className="text-gray-600 text-lg leading-relaxed mb-4">
                  เรามุ่งมั่นที่จะสร้างเทคโนโลยีที่เปลี่ยนแปลงโลกและทำให้ชีวิตของผู้คนดีขึ้น ด้วยนวัตกรรมที่ล้ำสมัยและการออกแบบที่ใส่ใจในทุกรายละเอียด
                </p>
                <p className="text-gray-600 text-lg leading-relaxed">
                  เราเชื่อว่าเทคโนโลยีที่ดีควรเข้าถึงได้สำหรับทุกคน และเราทำงานทุกวันเพื่อทำให้วิสัยทัศน์นี้เป็นจริง
                </p>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
              <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-6 rounded-xl shadow-md">
                <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                  <span className="text-purple-600 text-2xl mr-2">✨</span> ประวัติความเป็นมา
                </h3>
                <p className="text-gray-600">
                  ก่อตั้งขึ้นในปี 2022 โดยกลุ่มผู้เชี่ยวชาญด้านเทคโนโลยีที่มีความหลงใหลในการสร้างสรรค์ผลิตภัณฑ์ที่มีคุณภาพสูง เราเติบโตอย่างรวดเร็วและได้รับความไว้วางใจจากลูกค้าทั่วโลก
                </p>
              </div>
              
              <div className="bg-gradient-to-br from-pink-50 to-orange-50 p-6 rounded-xl shadow-md">
                <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                  <span className="text-pink-600 text-2xl mr-2">🚀</span> พันธกิจของเรา
                </h3>
                <p className="text-gray-600">
                  พันธกิจของเราคือการพัฒนาโซลูชันที่ใช้งานง่าย มีประสิทธิภาพสูง และตอบโจทย์ความต้องการของผู้ใช้อย่างแท้จริง เรามุ่งมั่นที่จะสร้างประสบการณ์ที่ดีที่สุดสำหรับลูกค้าของเรา
                </p>
              </div>
            </div>
            
            {/* แสดงข้อมูลบริษัท */}
            <div className="bg-gradient-to-br from-orange-50 to-yellow-50 p-6 rounded-xl shadow-md mb-12">
              <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                <span className="text-orange-600 text-2xl mr-2">🏢</span> ข้อมูลบริษัท
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-gray-700"><span className="font-medium">ชื่อบริษัท:</span> xxx</p>
                  <p className="text-gray-700"><span className="font-medium">ที่ตั้ง:</span> xxx</p>
                  <p className="text-gray-700"><span className="font-medium">จำนวนพนักงาน:</span> xxx คน</p>
                </div>
                <div>
                  <p className="text-gray-700"><span className="font-medium">อีเมล:</span> xxx</p>
                  <p className="text-gray-700"><span className="font-medium">โทรศัพท์:</span> xxx</p>
                  <p className="text-gray-700"><span className="font-medium">ที่อยู่:</span> xxx</p>
                </div>
              </div>
            </div>
            
            {/* แสดงทีมงาน */}
            
              <div className="mb-12">
                <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">ทีมงานของเรา</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
                  xxx
                </div>
              </div>
            
          </div>
          
          <div className="flex justify-center">
            <Link 
              href="/" 
              className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
            >
              กลับสู่หน้าหลัก
            </Link>
          </div>
          
          <p className="text-center text-gray-500 text-sm mt-6">
            ข้อมูลอัปเดตล่าสุด: 21:00 น.
          </p>
        </div>
      </div>
    </MainLayout>
  )
}

Step 9: มาลองสร้าง Controller ใน Laravel กันเพื่อไว้ทดสอบ Render ไปยังไฟล์ View ของ React
---
php artisan make:controller HomeController

---
<?php

namespace App\Http\Controllers;
use Inertia\Inertia;

use Illuminate\Http\Request;

class HomeController extends Controller
{
   /**
    * แสดงหน้าหลัก
    */
    public function welcome()
    {
        return Inertia::render('welcome');
    }

    /**
     * แสดงหน้าเกี่ยวกับ
     */
    public function about()
    {
        return Inertia::render('about');
    }
}

---
web.php
---
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\HomeController;

Route::get('/', [HomeController::class, 'welcome'])->name('home');
Route::get('/about', [HomeController::class, 'about'])->name('about');


Step 10: แก้ไขไฟล์ HomeController ไว้ส่งค่าไปหน้าไปหน้า View ใน React
---
<?php

namespace App\Http\Controllers;
use Inertia\Inertia;

use Illuminate\Http\Request;

class HomeController extends Controller
{
   /**
    * แสดงหน้าหลัก
    */
    public function welcome()
    {
        // ตัวอย่างตัวแปรเก็บข้อมูลทั่วไปที่จะส่งไปยังหน้า welcome
        $appInfo = [
            'name' => 'Inertia React',
            'version' => '1.0.0',
            'features' => [
                'ความเร็วสูง',
                'ปรับแต่งง่าย',
                'ปลอดภัย'
            ]
        ];

        return Inertia::render('welcome', [
            'appInfo' => $appInfo,
            'currentTime' => now()->format('d/m/Y H:i:s')
        ]);
    }

    /**
     * แสดงหน้าเกี่ยวกับเรา
     */
    public function about()
    {
        // ข้อมูล JSON ตัวอย่าง
        $companyInfo = [
            'name' => 'บริษัท แอปพลิเคชันของคุณ จำกัด',
            'established' => '2023',
            'employees' => 50,
            'location' => 'กรุงเทพฯ',
            'contact' => [
                'email' => 'info@yourapplication.com',
                'phone' => '02-123-4567',
                'address' => '123 ถนนตัวอย่าง, กรุงเทพฯ 10000'
            ]
        ];
        
        return Inertia::render('about', [
            'companyInfo' => $companyInfo,
            'lastUpdated' => now()->format('d/m/Y'),
        ]);
    }
}

----
แก้ไขหน้า welcome.tsx และ about.tsx เพื่อรับค่าจาก laravel controller ผ่าน props ดังนี้
---
welcome.tsx
---
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

// กำหนด interface สำหรับ props ที่รับมาจาก Controller ของ Laravel
interface AppInfo {
  name: string
  version: string
  features: string[]
}

interface WelcomeProps {
  appInfo: AppInfo
  currentTime: string
}

export default function Welcome({ appInfo, currentTime }: WelcomeProps ) {
  return (
    <MainLayout title='หน้าหลัก'>
      <div className="bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 py-16 px-4">
        <div className="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 md:p-12 text-center">
          <h1 className="text-4xl leading-20 font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-pink-600 mb-6">
            ยินดีต้อนรับสู่ { appInfo.name }
          </h1>
          <p className="text-gray-600 text-lg md:text-xl mb-4">
            เริ่มต้นการพัฒนาแอปพลิเคชันของคุณด้วย Laravel, Inertia และ React
          </p>
          <p className="text-gray-500 mb-8">
            เวอร์ชัน {appInfo.version} | เวลาเซิร์ฟเวอร์: {currentTime} น.
          </p>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
              {appInfo.features.map((feature, index) => {

                const emojis = ["🚀", "🛠️", "🔒"]
                const bgColors = ["bg-indigo-200", "bg-purple-200", "bg-pink-200"]

                return (
                  <div key={index} className={`${bgColors[index]} p-6 rounded-xl shadow-md hover:shadow-lg transition-all`}>
                    <div className="text-4xl mb-4">{emojis[index]}</div>
                    <h3 className="text-xl font-bold text-gray-800 mb-2">{feature}</h3>
                    <p className="text-gray-600">ประสิทธิภาพที่เหนือชั้นด้วยเทคโนโลยีล่าสุด</p>
                  </div>
                )
                })
              }
          </div>

          <div className="bg-indigo-100 rounded-xl p-4 mb-8">
              <p className="text-gray-700">
                  ทีมงานที่มีประสบการณ์ของเรา <span className="font-bold text-indigo-600">5 คน</span> พร้อมให้บริการคุณ
              </p>
          </div>
          <div className="flex flex-col md:flex-row gap-4 justify-center">
              <Link 
                  href="/about" 
                  className="px-8 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
              >
                  เกี่ยวกับเรา
              </Link>
              
              <Link 
                  href="/dashboard" 
                  className="px-8 py-3 bg-white text-indigo-600 font-semibold rounded-full shadow-lg border border-indigo-200 hover:shadow-xl transition-all transform hover:-translate-y-1"
              >
                  แดชบอร์ด
              </Link>
          </div>
        </div>
      </div>
    </MainLayout>
  )
}

---
about.tsx
----
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

// กำหนด interface สำหรับ props ที่รับมาจาก Controller ของ Laravel
interface CompanyContact {
  email: string
  phone: string
  address: string
}

interface CompanyInfo {
  name: string
  established: string
  employees: number
  location: string
  contact: CompanyContact
}

interface AboutProps {
  companyInfo: CompanyInfo
  lastUpdated: string
}

export default function About({ companyInfo, lastUpdated }: AboutProps ) {
  return (
    <MainLayout title='เกี่ยวกับเรา'>
      <div className="bg-gradient-to-br from-purple-500 via-pink-500 to-orange-500 py-16 px-4">
        <div className="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 md:p-12">
          <h1 className="text-4xl leading-24 md:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-orange-600 mb-6 text-center">
            เกี่ยวกับเรา
          </h1>
          <div className="mb-10">
            <div className="flex flex-col md:flex-row gap-8 items-center mb-12">
              <div className="w-full md:w-1/3">
                <div className="aspect-square bg-gradient-to-br from-purple-200 to-pink-200 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-8xl">🌟</span>
                </div>
              </div>
              
              <div className="w-full md:w-2/3">
                <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-4">วิสัยทัศน์ของเรา</h2>
                <p className="text-gray-600 text-lg leading-relaxed mb-4">
                  เรามุ่งมั่นที่จะสร้างเทคโนโลยีที่เปลี่ยนแปลงโลกและทำให้ชีวิตของผู้คนดีขึ้น ด้วยนวัตกรรมที่ล้ำสมัยและการออกแบบที่ใส่ใจในทุกรายละเอียด
                </p>
                <p className="text-gray-600 text-lg leading-relaxed">
                  เราเชื่อว่าเทคโนโลยีที่ดีควรเข้าถึงได้สำหรับทุกคน และเราทำงานทุกวันเพื่อทำให้วิสัยทัศน์นี้เป็นจริง
                </p>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
              <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-6 rounded-xl shadow-md">
                <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                  <span className="text-purple-600 text-2xl mr-2">✨</span> ประวัติความเป็นมา
                </h3>
                <p className="text-gray-600">
                  ก่อตั้งขึ้นในปี 2022 โดยกลุ่มผู้เชี่ยวชาญด้านเทคโนโลยีที่มีความหลงใหลในการสร้างสรรค์ผลิตภัณฑ์ที่มีคุณภาพสูง เราเติบโตอย่างรวดเร็วและได้รับความไว้วางใจจากลูกค้าทั่วโลก
                </p>
              </div>
              
              <div className="bg-gradient-to-br from-pink-50 to-orange-50 p-6 rounded-xl shadow-md">
                <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                  <span className="text-pink-600 text-2xl mr-2">🚀</span> พันธกิจของเรา
                </h3>
                <p className="text-gray-600">
                  พันธกิจของเราคือการพัฒนาโซลูชันที่ใช้งานง่าย มีประสิทธิภาพสูง และตอบโจทย์ความต้องการของผู้ใช้อย่างแท้จริง เรามุ่งมั่นที่จะสร้างประสบการณ์ที่ดีที่สุดสำหรับลูกค้าของเรา
                </p>
              </div>
            </div>
            
            {/* แสดงข้อมูลบริษัท */}
            <div className="bg-gradient-to-br from-orange-50 to-yellow-50 p-6 rounded-xl shadow-md mb-12">
              <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                <span className="text-orange-600 text-2xl mr-2">🏢</span> ข้อมูลบริษัท
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-gray-700"><span className="font-medium">ชื่อบริษัท:</span> {companyInfo.name}</p>
                  <p className="text-gray-700"><span className="font-medium">ที่ตั้ง:</span> {companyInfo.location}</p>
                  <p className="text-gray-700"><span className="font-medium">จำนวนพนักงาน:</span> {companyInfo.employees} คน</p>
                </div>
                <div>
                  <p className="text-gray-700"><span className="font-medium">อีเมล:</span> {companyInfo.contact.email}</p>
                  <p className="text-gray-700"><span className="font-medium">โทรศัพท์:</span> {companyInfo.contact.phone}</p>
                  <p className="text-gray-700"><span className="font-medium">ที่อยู่:</span> {companyInfo.contact.address}</p>
                </div>
              </div>
            </div>
            
            {/* แสดงทีมงาน */}
            
              <div className="mb-12">
                <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">ทีมงานของเรา</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
                  xxx
                </div>
              </div>
            
          </div>
          
          <div className="flex justify-center">
            <Link 
              href="/" 
              className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
            >
              กลับสู่หน้าหลัก
            </Link>
          </div>
          
          <p className="text-center text-gray-500 text-sm mt-6">
            ข้อมูลอัปเดตล่าสุด: {lastUpdated}
          </p>
        </div>
      </div>
    </MainLayout>
  )
}

Step 11: สร้างฐานมูลใหม่ใน mysql/mariadb
---
create database basic_inertia_react

Step 12: ทีนี้มาทำการ Config ไฟล์ .env เพื่อเชื่อมต่อฐานข้อมูล mysql/maraidb กัน
---
# SQLite
# DB_CONNECTION=sqlite

# MariaDB
DB_CONNECTION=mariadb
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=basic_inertia_react
DB_USERNAME=root
DB_PASSWORD=

# MySQL
# DB_CONNECTION=mysql
# DB_HOST=localhost
# DB_PORT=3306
# DB_DATABASE=basic_inertia_react
# DB_USERNAME=root
# DB_PASSWORD=

# PostgreSQL
# DB_CONNECTION=pgsql
# DB_HOST=localhost
# DB_PORT=5432
# DB_DATABASE=basic_inertia_react
# DB_USERNAME=postgres
# DB_PASSWORD=

# SQL Server
# DB_CONNECTION=sqlsrv
# DB_HOST=localhost
# DB_PORT=1433
# DB_DATABASE=basic_inertia_react
# DB_USERNAME=sa
# DB_PASSWORD=y0urP@ssw0rd

Step 13: เรามาทำการปรับแต่งไฟล์ migrations "000_xxx_crate_users_table.php"
---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name')->comment('ชื่อของผู้ใช้');
            $table->string('email')->unique()->comment('อีเมลของผู้ใช้');
            $table->timestamp('email_verified_at')->nullable()->comment('วันที่ยืนยันอีเมล');
            $table->string('password')->comment('รหัสผ่านของผู้ใช้');
            $table->string('position')->nullable()->comment('ตำแหน่งงานของผู้ใช้');
            $table->string('avatar')->nullable()->comment('URL รูปโปรไฟล์ของผู้ใช้');
            $table->boolean('is_team')->default(false)->comment('ใช้ระบุว่าเป็นสมาชิกทีมหรือไม่');
            $table->text('bio')->nullable()->comment('ประวัติโดยย่อของผู้ใช้');
            $table->rememberToken()->comment('รหัสการจำลองการเข้าสู่ระบบ');
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary()->comment('อีเมลของผู้ใช้');
            $table->string('token')->comment('รหัสการรีเซ็ตรหัสผ่าน');
            $table->timestamp('created_at')->nullable()->comment('วันที่สร้างรหัสการรีเซ็ตรหัสผ่าน');
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary()->comment('รหัสของการเซสชั่น');
            $table->foreignId('user_id')->nullable()->index()->comment('รหัสของผู้ใช้');
            $table->string('ip_address', 45)->nullable()->comment('ที่อยู่ IP ของผู้ใช้');
            $table->text('user_agent')->nullable()->comment('ข้อมูลตัวตัวอย่างของผู้ใช้');
            $table->longText('payload')->comment('ข้อมูลการเซสชั่น');
            $table->integer('last_activity')->index()->comment('วันที่สุดท้ายของการเซสชั่น');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};

Step 14: สร้างไฟล์ UserSeeder เพื่อไว้ generate ข้อมูลตัวอย่างใส่ลงไปเมื่อทำการ seed เริ่มต้น
---
\database\seeders\UserSeeder.php
---
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use App\Models\User;

class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // สร้างบัญชี admin (สมาชิกทีม)
        User::create([
            'name' => 'แอดมิน ระบบ',
            'email' => 'admin@example.com',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'position' => 'ผู้ดูแลระบบ',
            'avatar' => 'https://randomuser.me/api/portraits/men/1.jpg',
            'is_team' => true,
            'bio' => 'ผู้ดูแลระบบหลักที่มีประสบการณ์ในการพัฒนาซอฟต์แวร์มากกว่า 10 ปี เชี่ยวชาญด้าน Laravel และ React'
        ]);

        // สร้างสมาชิกทีมอีก 4 คน
        $teamMembers = [
            [
                'name' => 'สมชาย ใจดี',
                'email' => 'somchai@example.com',
                'position' => 'นักพัฒนา Frontend',
                'avatar' => 'https://randomuser.me/api/portraits/men/2.jpg',
                'bio' => 'ชำนาญด้าน React, Vue.js และการออกแบบ UI/UX มีประสบการณ์มากกว่า 5 ปีในการพัฒนาเว็บแอปพลิเคชัน'
            ],
            [
                'name' => 'สมหญิง รักเรียน',
                'email' => 'somying@example.com',
                'position' => 'นักพัฒนา Backend',
                'avatar' => 'https://randomuser.me/api/portraits/women/3.jpg',
                'bio' => 'เชี่ยวชาญด้าน Laravel, PHP และฐานข้อมูล ชอบแก้ปัญหาที่ซับซ้อนและพัฒนาระบบที่มีประสิทธิภาพ'
            ],
            [
                'name' => 'มานะ พากเพียร',
                'email' => 'mana@example.com',
                'position' => 'นักออกแบบกราฟิก',
                'avatar' => 'https://randomuser.me/api/portraits/men/4.jpg',
                'bio' => 'นักออกแบบกราฟิกที่มีความคิดสร้างสรรค์ ชำนาญการใช้ Photoshop, Illustrator และการออกแบบเว็บไซต์'
            ],
            [
                'name' => 'วิภา สุขสันต์',
                'email' => 'wipa@example.com',
                'position' => 'ผู้จัดการโครงการ',
                'avatar' => 'https://randomuser.me/api/portraits/women/5.jpg',
                'bio' => 'ผู้จัดการโครงการมืออาชีพที่มีประสบการณ์กว่า 7 ปี เชี่ยวชาญในการบริหารทีมและวางแผนโครงการให้สำเร็จตามเป้าหมาย'
            ],
        ];

        foreach ($teamMembers as $member) {
            User::create([
                'name' => $member['name'],
                'email' => $member['email'],
                'password' => Hash::make('password'),
                'email_verified_at' => now(),
                'position' => $member['position'],
                'avatar' => $member['avatar'],
                'is_team' => true,
                'bio' => $member['bio']
            ]);
        }

        // สร้างผู้ใช้ทั่วไปอีก 5 คน
        $regularUsers = [
            [
                'name' => 'ประเสริฐ สุขใจ',
                'email' => 'prasert@example.com',
                'avatar' => 'https://randomuser.me/api/portraits/men/6.jpg',
            ],
            [
                'name' => 'มาลี ดอกไม้',
                'email' => 'malee@example.com',
                'avatar' => 'https://randomuser.me/api/portraits/women/7.jpg',
            ],
            [
                'name' => 'สมศักดิ์ มั่นคง',
                'email' => 'somsak@example.com',
                'avatar' => 'https://randomuser.me/api/portraits/men/8.jpg',
            ],
            [
                'name' => 'นิภา งามเลิศ',
                'email' => 'nipa@example.com',
                'avatar' => 'https://randomuser.me/api/portraits/women/9.jpg',
            ],
            [
                'name' => 'ประทีป แสงสว่าง',
                'email' => 'prateep@example.com',
                'avatar' => 'https://randomuser.me/api/portraits/men/10.jpg',
            ],
        ];

        foreach ($regularUsers as $user) {
            User::create([
                'name' => $user['name'],
                'email' => $user['email'],
                'password' => Hash::make('password'),
                'email_verified_at' => now(),
                'avatar' => $user['avatar'],
                'is_team' => false,
            ]);
        }
    }
} 

Step 15: แก้ไขไฟล์ DatabaseSeeder.php
---
<?php

namespace Database\Seeders;

use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        // User::factory()->create([
        //     'name' => 'Test User',
        //     'email' => 'test@example.com',
        // ]);
        
        $this->call([
            UserSeeder::class,
        ]);
    }
}

Step 16: สั่ง migrate และ seeding
---
php artisan migrate
php artisan db:seed

Step 17: ปรับไฟล์ Model User.php
---
App\Models\User.php
---
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'position',
        'avatar',
        'is_team',
        'bio',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
'is_team' => 'boolean',
        ];
    }

    /**
     * ดึงเฉพาะผู้ใช้ที่เป็นสมาชิกทีม
     * 
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeTeamMembers($query)
    {
        return $query->where('is_team', true);
    }

    /**
     * รูปโปรไฟล์พร้อม URL เต็ม
     * 
     * @return string
     */
    public function getAvatarUrlAttribute()
    {
        if (!$this->avatar) {
            return null;
        }
        
        // ถ้าเป็น URL แล้วไม่ต้องเติมอะไร
        if (str_starts_with($this->avatar, 'http')) {
            return $this->avatar;
        }
        
        // ถ้าไม่ใช่ URL ให้เติม path ของ storage ด้านหน้า
        return asset('storage/' . $this->avatar);
    }
    
}

Step 18: มาอ่านข้อมูลจาก Model User ใน Controller "HomeController.php"
---
<?php

namespace App\Http\Controllers;
use Inertia\Inertia;

use Illuminate\Http\Request;
use App\Models\User;

class HomeController extends Controller
{
   /**
    * แสดงหน้าหลัก
    */
    public function welcome()
    {
        // ตัวอย่างตัวแปรเก็บข้อมูลทั่วไปที่จะส่งไปยังหน้า welcome
        $appInfo = [
            'name' => 'Inertia React',
            'version' => '1.0.0',
            'features' => [
                'ความเร็วสูง',
                'ปรับแต่งง่าย',
                'ปลอดภัย'
            ]
        ];

        // ดึงข้อมูลจำนวนสมาชิกของทีม
        // $teamCount = User::where('is_team', true)->count();

        // ใช้ scope ที่เตรียมไว้ในโมเดล User แทน โดยใช้วิธีนี้จะทำให้โค้ดสะดวกขึ้น
        $teamCount = User::teamMembers()->count();

        return Inertia::render('welcome', [
            'appInfo' => $appInfo,
            'currentTime' => now()->format('d/m/Y H:i:s'),
            'teamCount' => $teamCount
        ]);
    }

    /**
     * แสดงหน้าเกี่ยวกับเรา
     */
    public function about()
    {
        // ดึงข้อมูลจำนวนสมาชิกของที่เป็นทีมงาน
        // ดึงเฉพาะฟิลด์ id, name, position, avatar และ bio
        $teamMembers = User::teamMembers()->select('id', 'name', 'position', 'avatar', 'bio')->get();

        // ข้อมูล JSON ตัวอย่าง
        $companyInfo = [
            'name' => 'บริษัท แอปพลิเคชันของคุณ จำกัด',
            'established' => '2023',
            'employees' => 50,
            'location' => 'กรุงเทพฯ',
            'contact' => [
                'email' => 'info@yourapplication.com',
                'phone' => '02-123-4567',
                'address' => '123 ถนนตัวอย่าง, กรุงเทพฯ 10000'
            ]
        ];
        
        return Inertia::render('about', [
            'companyInfo' => $companyInfo,
            'lastUpdated' => now()->format('d/m/Y'),
            'teamMembers' => $teamMembers
        ]);
    }
}


Step 19: แสดงผลที่หน้า welcome.tsx
---
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

// กำหนด interface สำหรับ props ที่รับมาจาก Controller ของ Laravel
interface AppInfo {
  name: string
  version: string
  features: string[]
}

interface WelcomeProps {
  appInfo: AppInfo
  currentTime: string
  teamCount: number
}

export default function Welcome({ appInfo, currentTime, teamCount }: WelcomeProps ) {
  return (
    <MainLayout title='หน้าหลัก'>
      <div className="bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 py-16 px-4">
        <div className="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 md:p-12 text-center">
          <h1 className="text-4xl leading-20 font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-pink-600 mb-6">
            ยินดีต้อนรับสู่ { appInfo.name }
          </h1>
          <p className="text-gray-600 text-lg md:text-xl mb-4">
            เริ่มต้นการพัฒนาแอปพลิเคชันของคุณด้วย Laravel, Inertia และ React
          </p>
          <p className="text-gray-500 mb-8">
            เวอร์ชัน {appInfo.version} | เวลาเซิร์ฟเวอร์: {currentTime} น.
          </p>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
              {appInfo.features.map((feature, index) => {

                const emojis = ["🚀", "🛠️", "🔒"]
                const bgColors = ["bg-indigo-200", "bg-purple-200", "bg-pink-200"]

                return (
                  <div key={index} className={`${bgColors[index]} p-6 rounded-xl shadow-md hover:shadow-lg transition-all`}>
                    <div className="text-4xl mb-4">{emojis[index]}</div>
                    <h3 className="text-xl font-bold text-gray-800 mb-2">{feature}</h3>
                    <p className="text-gray-600">ประสิทธิภาพที่เหนือชั้นด้วยเทคโนโลยีล่าสุด</p>
                  </div>
                )
                })
              }
          </div>

          <div className="bg-indigo-100 rounded-xl p-4 mb-8">
              <p className="text-gray-700">
                  ทีมงานที่มีประสบการณ์ของเรา <span className="font-bold text-indigo-600">{ teamCount } คน</span> พร้อมให้บริการคุณ
              </p>
          </div>
          <div className="flex flex-col md:flex-row gap-4 justify-center">
              <Link 
                  href="/about" 
                  className="px-8 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
              >
                  เกี่ยวกับเรา
              </Link>
              
              <Link 
                  href="/dashboard" 
                  className="px-8 py-3 bg-white text-indigo-600 font-semibold rounded-full shadow-lg border border-indigo-200 hover:shadow-xl transition-all transform hover:-translate-y-1"
              >
                  แดชบอร์ด
              </Link>
          </div>
        </div>
      </div>
    </MainLayout>
  )
}


Step 20: แสดงผลที่หน้า about.tsx
---
import MainLayout from '@/layouts/MainLayout'
import { Link } from '@inertiajs/react'

// กำหนด interface สำหรับ props ที่รับมาจาก Controller ของ Laravel
interface CompanyContact {
  email: string
  phone: string
  address: string
}

interface CompanyInfo {
  name: string
  established: string
  employees: number
  location: string
  contact: CompanyContact
}

interface TeamMember {
  id: number
  name: string
  position: string
  avatar: string
  bio: string
}

interface AboutProps {
  companyInfo: CompanyInfo
  lastUpdated: string
  teamMembers: TeamMember[]
}

export default function About({ companyInfo, lastUpdated, teamMembers }: AboutProps ) {
  return (
    <MainLayout title='เกี่ยวกับเรา'>
      <div className="bg-gradient-to-br from-purple-500 via-pink-500 to-orange-500 py-16 px-4">
        <div className="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 md:p-12">
          <h1 className="text-4xl leading-24 md:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-orange-600 mb-6 text-center">
            เกี่ยวกับเรา
          </h1>
          <div className="mb-10">
            <div className="flex flex-col md:flex-row gap-8 items-center mb-12">
              <div className="w-full md:w-1/3">
                <div className="aspect-square bg-gradient-to-br from-purple-200 to-pink-200 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-8xl">🌟</span>
                </div>
              </div>
              
              <div className="w-full md:w-2/3">
                <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-4">วิสัยทัศน์ของเรา</h2>
                <p className="text-gray-600 text-lg leading-relaxed mb-4">
                  เรามุ่งมั่นที่จะสร้างเทคโนโลยีที่เปลี่ยนแปลงโลกและทำให้ชีวิตของผู้คนดีขึ้น ด้วยนวัตกรรมที่ล้ำสมัยและการออกแบบที่ใส่ใจในทุกรายละเอียด
                </p>
                <p className="text-gray-600 text-lg leading-relaxed">
                  เราเชื่อว่าเทคโนโลยีที่ดีควรเข้าถึงได้สำหรับทุกคน และเราทำงานทุกวันเพื่อทำให้วิสัยทัศน์นี้เป็นจริง
                </p>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
              <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-6 rounded-xl shadow-md">
                <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                  <span className="text-purple-600 text-2xl mr-2">✨</span> ประวัติความเป็นมา
                </h3>
                <p className="text-gray-600">
                  ก่อตั้งขึ้นในปี 2022 โดยกลุ่มผู้เชี่ยวชาญด้านเทคโนโลยีที่มีความหลงใหลในการสร้างสรรค์ผลิตภัณฑ์ที่มีคุณภาพสูง เราเติบโตอย่างรวดเร็วและได้รับความไว้วางใจจากลูกค้าทั่วโลก
                </p>
              </div>
              
              <div className="bg-gradient-to-br from-pink-50 to-orange-50 p-6 rounded-xl shadow-md">
                <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                  <span className="text-pink-600 text-2xl mr-2">🚀</span> พันธกิจของเรา
                </h3>
                <p className="text-gray-600">
                  พันธกิจของเราคือการพัฒนาโซลูชันที่ใช้งานง่าย มีประสิทธิภาพสูง และตอบโจทย์ความต้องการของผู้ใช้อย่างแท้จริง เรามุ่งมั่นที่จะสร้างประสบการณ์ที่ดีที่สุดสำหรับลูกค้าของเรา
                </p>
              </div>
            </div>
            
            {/* แสดงข้อมูลบริษัท */}
            <div className="bg-gradient-to-br from-orange-50 to-yellow-50 p-6 rounded-xl shadow-md mb-12">
              <h3 className="text-xl font-bold text-gray-800 mb-3 flex items-center">
                <span className="text-orange-600 text-2xl mr-2">🏢</span> ข้อมูลบริษัท
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-gray-700"><span className="font-medium">ชื่อบริษัท:</span> {companyInfo.name}</p>
                  <p className="text-gray-700"><span className="font-medium">ที่ตั้ง:</span> {companyInfo.location}</p>
                  <p className="text-gray-700"><span className="font-medium">จำนวนพนักงาน:</span> {companyInfo.employees} คน</p>
                </div>
                <div>
                  <p className="text-gray-700"><span className="font-medium">อีเมล:</span> {companyInfo.contact.email}</p>
                  <p className="text-gray-700"><span className="font-medium">โทรศัพท์:</span> {companyInfo.contact.phone}</p>
                  <p className="text-gray-700"><span className="font-medium">ที่อยู่:</span> {companyInfo.contact.address}</p>
                </div>
              </div>
            </div>
            
            {/* แสดงทีมงาน */}
            
            {teamMembers.length > 0 && (
              <div className="mb-12">
                <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">ทีมงานของเรา</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
                  {teamMembers.map(member => (
                    <div key={member.id} className="bg-white rounded-xl shadow-md p-4 text-center">
                      <div className="w-20 h-20 mx-auto mb-3 rounded-full overflow-hidden bg-gray-200">
                        {member.avatar ? (
                          <img src={member.avatar} alt={member.name} className="w-full h-full object-cover" />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-500">
                            <svg className="w-12 h-12" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                              <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                            </svg>
                          </div>
                        )}
                      </div>
                      <h4 className="text-lg font-bold text-gray-800">{member.name}</h4>
                      <p className="text-gray-600">{member.position}</p>
                      {member.bio && (
                        <p className="text-gray-500 text-sm mt-2 line-clamp-3">{member.bio}</p>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
            
          </div>
          
          <div className="flex justify-center">
            <Link 
              href="/" 
              className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
            >
              กลับสู่หน้าหลัก
            </Link>
          </div>
          
          <p className="text-center text-gray-500 text-sm mt-6">
            ข้อมูลอัปเดตล่าสุด: {lastUpdated}
          </p>
        </div>
      </div>
    </MainLayout>
  )
}

---------------------------------
⚡ DAY 6
---------------------------------
7. ระบบ Authentication & Authorization
8. Workshop ระบบ Inventory Management

---
Step 1: สร้าง RegisterController
---
php artisan make:controller Auth\RegisterController

แก้ไขโค้ดดังนี้
---
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rules\Password;
use Inertia\Inertia;

class RegisterController extends Controller
{
    /**
     * แสดงฟอร์มลงทะเบียน
     */
    public function showRegisterForm()
    {
        return Inertia::render('Auth/Register');
    }

   
    /**
     * ดำเนินการลงทะเบียนผู้ใช้งานใหม่
     */
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            // 'password' => ['required', 'confirmed', Password::defaults()],
            // 'password' => ['required', 'confirmed', Password::defaults(function(){
            //     return Password::min(8)
            //         ->letters()
            //         ->mixedCase()
            //         ->numbers()
            //         ->symbols()
            //         ->uncompromised();
            // })],
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'avatar' => 'https://i.pravatar.cc/150?img=' . rand(1, 70),
            'is_team' => false,
        ]);

        auth()->login($user);

        return redirect()->route('dashboard')->with('success', 'ลงทะเบียนสำเร็จ! ยินดีต้อนรับเข้าสู่ระบบ');
    }
} 


---
Step 2: สร้าง LoginController
---
php artisan make:controller Auth\LoginController

แก้ไขโค้ดดังนี้
---
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;

class LoginController extends Controller
{
    /**
     * แสดงฟอร์มเข้าสู่ระบบ
     */
    public function showLoginForm()
    {
        return Inertia::render('Auth/Login');
    }

    /**
     * ดำเนินการเข้าสู่ระบบ
     */
    public function login(Request $request)
    {
        // ตรวจสอบข้อมูลที่รับมา
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required|min:8',
        ]);

        // remember me
        $remember = $request->boolean('remember');

        // ตรวจสอบข้อมูลเข้าสู่ระบบ
        if (Auth::attempt($credentials, $remember)) {
            $request->session()->regenerate(); // สร้าง session ใหม่

            // ถ้าสำเร็จ
            return redirect()->intended(route('dashboard'))->with('success', 'ยินดีต้อนรับกลับ!');
        }

        // ถ้าไม่สำเร็จ
        return back()->withErrors([
            'email' => 'ข้อมูลที่ระบุไม่ตรงกับบัญชีในระบบของเรา',
        ])->onlyInput('email');
    }

    /**
     * ออกจากระบบ
     */
    public function logout(Request $request)
    {
        Auth::logout();

        $request->session()->invalidate(); // ลบ session ทั้งหมด
        $request->session()->regenerateToken(); // สร้าง token ใหม่

        return redirect('/'); // กลับไปหน้าแรก
    }
} 

---
Step 3: สร้าง View "Login.tsx" และ "Register.tsx"
---
resources\js\pages\Auth\Login.tsx
---
import React from 'react'
import { Head, Link, useForm } from '@inertiajs/react'

type FormData = {
  email: string
  password: string
  remember: boolean
}

export default function Login() {
  const { data, setData, post, processing, errors } = useForm<FormData>({
    email: '',
    password: '',
    remember: false,
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    post('/login')
  }

  const handleRememberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setData('remember', e.target.checked)
  }

  return (
    <div className="bg-gray-100 min-h-screen flex items-center justify-center">
      <Head title="เข้าสู่ระบบ" />
      <div className="min-w-96 mx-auto py-12">
        <div className="bg-white shadow-md rounded-lg p-8">
          <h1 className="text-2xl font-bold text-center text-indigo-600 mb-6">เข้าสู่ระบบ</h1>

          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label htmlFor="email" className="block text-gray-700 mb-1">อีเมล</label>
              <input
                id="email"
                type="text"
                value={data.email}
                onChange={e => setData('email', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.email && <div className="text-red-500 text-sm mt-1">{errors.email}</div>}
            </div>

            <div className="mb-4">
              <label htmlFor="password" className="block text-gray-700 mb-1">รหัสผ่าน</label>
              <input
                id="password"
                type="password"
                value={data.password}
                onChange={e => setData('password', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.password && <div className="text-red-500 text-sm mt-1">{errors.password}</div>}
            </div>

            <div className="mb-6 flex items-center">
              <input
                id="remember"
                type="checkbox"
                checked={data.remember}
                onChange={handleRememberChange}
                className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
              />
              <label htmlFor="remember" className="ml-2 text-sm text-gray-700">
                จดจำการเข้าสู่ระบบ
              </label>
            </div>

            <div className="mb-6">
              <button
                type="submit"
                disabled={processing}
                className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-150 ease-in-out"
              >
                {processing ? 'กำลังประมวลผล...' : 'เข้าสู่ระบบ'}
              </button>
            </div>

            <div className="text-center text-sm">
              ยังไม่มีบัญชีผู้ใช้?{' '}
              <Link
                href="/register"
                className="text-indigo-600 hover:text-indigo-500 font-medium"
              >
                ลงทะเบียน
              </Link>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

---
resources\js\pages\Auth\Regiser.tsx
---
import React from 'react'
import { Head, Link, useForm } from '@inertiajs/react'

export default function Register() {
  const { data, setData, post, processing, errors } = useForm({
    name: '',
    email: '',
    password: '',
    password_confirmation: '',
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    post('/register')
  }

  return (
    <div className="bg-gray-100 min-h-screen flex items-center justify-center">
      
      <Head title="ลงทะเบียน" />

      <div className="min-w-96 mx-auto py-12">
        <div className="bg-white shadow-md rounded-lg p-8">
          <h1 className="text-2xl font-bold text-center text-indigo-600 mb-6">ลงทะเบียนผู้ใช้งานใหม่</h1>

          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label htmlFor="name" className="block text-gray-700 mb-1">ชื่อ</label>
              <input
                id="name"
                type="text"
                value={data.name}
                onChange={e => setData('name', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.name && <div className="text-red-500 text-sm mt-1">{errors.name}</div>}
            </div>

            <div className="mb-4">
              <label htmlFor="email" className="block text-gray-700 mb-1">อีเมล</label>
              <input
                id="email"
                type="text"
                value={data.email}
                onChange={e => setData('email', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.email && <div className="text-red-500 text-sm mt-1">{errors.email}</div>}
            </div>

            <div className="mb-4">
              <label htmlFor="password" className="block text-gray-700 mb-1">รหัสผ่าน</label>
              <input
                id="password"
                type="password"
                value={data.password}
                onChange={e => setData('password', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.password && <div className="text-red-500 text-sm mt-1">{errors.password}</div>}
            </div>

            <div className="mb-6">
              <label htmlFor="password_confirmation" className="block text-gray-700 mb-1">ยืนยันรหัสผ่าน</label>
              <input
                id="password_confirmation"
                type="password"
                value={data.password_confirmation}
                onChange={e => setData('password_confirmation', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
            </div>

            <div className="mb-6">
              <button
                type="submit"
                disabled={processing}
                className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-150 ease-in-out"
              >
                {processing ? 'กำลังประมวลผล...' : 'ลงทะเบียน'}
              </button>
            </div>

            <div className="text-center text-sm">
              มีบัญชีผู้ใช้แล้ว?{' '}
              <Link
                href="/login"
                className="text-indigo-600 hover:text-indigo-500 font-medium"
              >
                เข้าสู่ระบบ
              </Link>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

---
Step 4: แก้ไขเพิ่ม route ที่ไฟล์ "web.php"
---
\routes\web.php
---
// เพิ่มเส้นทางสำหรับการลงทะเบียน
Route::get('/register', [App\Http\Controllers\Auth\RegisterController::class, 'showRegisterForm'])->name('register');
Route::post('/register', [App\Http\Controllers\Auth\RegisterController::class, 'register']);

// เส้นทางสำหรับการเข้าสู่ระบบและออกจากระบบ
Route::get('/login', [App\Http\Controllers\Auth\LoginController::class, 'showLoginForm'])->name('login');
Route::post('/login', [App\Http\Controllers\Auth\LoginController::class, 'login']);
Route::post('/logout', [App\Http\Controllers\Auth\LoginController::class, 'logout'])->name('logout');

---
Step 5: แก้ไขไฟล์ HomeController.php เพิ่มส่วน function dashboard
---
<?php

namespace App\Http\Controllers;
use Inertia\Inertia;

use Illuminate\Http\Request;
use App\Models\User;

class HomeController extends Controller
{
   /**
    * แสดงหน้าหลัก
    */
    public function welcome()
    {
        // ตัวอย่างตัวแปรเก็บข้อมูลทั่วไปที่จะส่งไปยังหน้า welcome
        $appInfo = [
            'name' => 'Inertia React',
            'version' => '1.0.0',
            'features' => [
                'ความเร็วสูง',
                'ปรับแต่งง่าย',
                'ปลอดภัย'
            ]
        ];

        // ดึงข้อมูลจำนวนสมาชิกของทีม
        // $teamCount = User::where('is_team', true)->count();

        // ใช้ scope ที่เตรียมไว้ในโมเดล User แทน โดยใช้วิธีนี้จะทำให้โค้ดสะดวกขึ้น
        $teamCount = User::teamMembers()->count();

        return Inertia::render('welcome', [
            'appInfo' => $appInfo,
            'currentTime' => now()->format('d/m/Y H:i:s'),
            'teamCount' => $teamCount
        ]);
    }

    /**
     * แสดงหน้าเกี่ยวกับเรา
     */
    public function about()
    {
        // ดึงข้อมูลจำนวนสมาชิกของที่เป็นทีมงาน
        // ดึงเฉพาะฟิลด์ id, name, position, avatar และ bio
        $teamMembers = User::teamMembers()->select('id', 'name', 'position', 'avatar', 'bio')->get();

        // ข้อมูล JSON ตัวอย่าง
        $companyInfo = [
            'name' => 'บริษัท แอปพลิเคชันของคุณ จำกัด',
            'established' => '2023',
            'employees' => 50,
            'location' => 'กรุงเทพฯ',
            'contact' => [
                'email' => 'info@yourapplication.com',
                'phone' => '02-123-4567',
                'address' => '123 ถนนตัวอย่าง, กรุงเทพฯ 10000'
            ]
        ];
        
        return Inertia::render('about', [
            'companyInfo' => $companyInfo,
            'lastUpdated' => now()->format('d/m/Y'),
            'teamMembers' => $teamMembers
        ]);
    }

    /**
     * แสดงหน้าแดชบอร์ด
     */
    public function dashboard(Request $request)
    {

 	// ข้อมูลผู้ใช้ที่เข้าสู่ระบบ
        $user = $request->user();
        
        // ข้อมูลสถิติตัวอย่าง
        $stats = [
            'visitors' => rand(100, 1000),
            'sales' => rand(10, 100),
            'revenue' => rand(10000, 100000),
            'growth' => rand(1, 20) . '%'
        ];
        
        // ข้อมูลกราฟตัวอย่าง
        $chartData = [
            'labels' => ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.'],
            'data' => [
                rand(10, 100),
                rand(10, 100),
                rand(10, 100),
                rand(10, 100),
                rand(10, 100),
                rand(10, 100)
            ]
        ];
        
        // ข้อมูลการแจ้งเตือน
        $notifications = [
            [
                'id' => 1,
                'message' => 'มีการสั่งซื้อใหม่',
                'time' => '10 นาทีที่แล้ว',
                'read' => false
            ],
            [
                'id' => 2,
                'message' => 'ส่งอีเมลยืนยันเรียบร้อยแล้ว',
                'time' => '1 ชั่วโมงที่แล้ว',
                'read' => true
            ]
        ];
        
        // จำนวนสมาชิกทีมงาน
        $teamCount = User::teamMembers()->count();
        
        // ส่งข้อมูลไปยัง dashboard.tsx component
        return Inertia::render('dashboard', [
            'user' => $user,
            'stats' => $stats,
            'chartData' => $chartData,
            'notifications' => $notifications,
            'serverTime' => now()->format('d/m/Y H:i:s'),
            'teamCount' => $teamCount,
        ]);
    }
}


---
Step 6:เพิ่ม View "dashboard.tsx"
---
\resources\js\pages\dashboard.tsx
---
import React from 'react'
import { Link } from '@inertiajs/react'
import MainLayout from '../layouts/MainLayout'

// กำหนด interfaces สำหรับ props ที่รับมาจาก Controller
interface User {
  id: number
  name: string
  email: string
  // เพิ่ม properties ตามที่ต้องการ
}

interface Stats {
  visitors: number
  sales: number
  revenue: number
  growth: string
}

interface ChartData {
  labels: string[]
  data: number[]
}

interface Notification {
  id: number
  message: string
  time: string
  read: boolean
}

interface DashboardProps {
  user: User
  stats: Stats
  chartData: ChartData
  notifications: Notification[]
  serverTime: string
  teamCount: number
}

export default function Dashboard({ user, stats, chartData, notifications, serverTime, teamCount }: DashboardProps) {
  return (
    <MainLayout title="แดชบอร์ด">
      <div className="bg-gray-100 py-8 px-4">
        <div className="max-w-7xl mx-auto">
          {/* ส่วนหัว */}
          <div className="bg-white rounded-xl shadow-md p-6 mb-6">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-800">สวัสดี, {user.name}</h1>
                <p className="text-gray-600">ยินดีต้อนรับกลับมายังแดชบอร์ดของคุณ</p>
              </div>
              <div className="mt-4 md:mt-0 flex flex-col items-end">
                <p className="text-sm text-gray-500">เวลาเซิร์ฟเวอร์: {serverTime}</p>
                <p className="text-sm text-indigo-500 mt-1">จำนวนทีมงาน: {teamCount} คน</p>
              </div>
            </div>
          </div>
          
          {/* สถิติ */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-sm font-medium text-gray-500 mb-2">ผู้เข้าชม</h3>
              <p className="text-3xl font-bold text-indigo-600">{stats.visitors}</p>
              <div className="mt-2 text-sm text-green-500">
                <span>↑ {stats.growth}</span>
              </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-sm font-medium text-gray-500 mb-2">ยอดขาย</h3>
              <p className="text-3xl font-bold text-purple-600">{stats.sales}</p>
              <div className="mt-2 text-sm text-green-500">
                <span>↑ {stats.growth}</span>
              </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-sm font-medium text-gray-500 mb-2">รายได้</h3>
              <p className="text-3xl font-bold text-pink-600">฿{stats.revenue.toLocaleString()}</p>
              <div className="mt-2 text-sm text-green-500">
                <span>↑ {stats.growth}</span>
              </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-sm font-medium text-gray-500 mb-2">อัตราการเติบโต</h3>
              <p className="text-3xl font-bold text-orange-600">{stats.growth}</p>
              <div className="mt-2 text-sm text-green-500">
                <span>↑ จากเดือนที่แล้ว</span>
              </div>
            </div>
          </div>
          
          {/* กราฟและการแจ้งเตือน */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            <div className="bg-white rounded-xl shadow-md p-6 lg:col-span-2">
              <h2 className="text-lg font-bold text-gray-800 mb-4">ภาพรวมรายเดือน</h2>
              
              {/* จำลองกราฟด้วย div */}
              <div className="h-64 bg-gray-50 rounded-lg flex items-end p-4 space-x-2">
                {chartData.data.map((value, index) => {
                  // คำนวณความสูงตามสัดส่วน
                  const maxHeight = 200;
                  const height = (value / Math.max(...chartData.data)) * maxHeight;
                  
                  return (
                    <div key={index} className="flex flex-col items-center flex-1">
                      <div 
                        className="w-full bg-indigo-500 rounded-t-sm" 
                        style={{ height: `${height}px` }}
                      ></div>
                      <div className="text-xs text-gray-500 mt-2">{chartData.labels[index]}</div>
                    </div>
                  );
                })}
              </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-md p-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4">การแจ้งเตือน</h2>
              
              {notifications.length > 0 ? (
                <ul className="space-y-4">
                  {notifications.map(notification => (
                    <li key={notification.id} className={`p-3 rounded-lg ${notification.read ? 'bg-gray-50' : 'bg-blue-50'}`}>
                      <div className="flex items-start">
                        <div className={`w-2 h-2 rounded-full mt-1.5 ${notification.read ? 'bg-gray-300' : 'bg-blue-500'}`}></div>
                        <div className="ml-3">
                          <p className={`text-sm ${notification.read ? 'text-gray-700' : 'text-gray-900 font-medium'}`}>
                            {notification.message}
                          </p>
                          <p className="text-xs text-gray-500 mt-1">{notification.time}</p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500 text-center py-4">ไม่มีการแจ้งเตือนใหม่</p>
              )}
            </div>
          </div>

        </div>
      </div>
    </MainLayout>
  )
} 

---
Step 6: แก้ไข route ที่ไฟล์ web.php
---
Route::get('/dashboard', [App\Http\Controllers\HomeController::class, 'dashboard'])->name('dashboard')->middleware(['auth']);

---
Step 7: แก้ไขไฟล์ Navbar.tsx
---
import { Link, usePage } from '@inertiajs/react'
// import { PageProps } from '@/types'

// Interface สำหรับ props ที่รับมาจาก Controller
interface User {
    id: number
    name: string
    email: string
    position?: string
    avatar?: string
    is_team?: boolean
    bio?: string | null
}

interface PageProps {
    auth: {
        user: User | null
    }
    [key: string]: string | number | boolean | object | null
}

export default function NavBar () {
    
    const { auth } = usePage<PageProps>().props

  return (
    <nav className="bg-white shadow-md py-4">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <div className="text-xl font-bold text-indigo-600">
          <Link href="/">Laravel React</Link>
        </div>
        
        <div className="flex items-center">
          <ul className="flex space-x-6 mr-6">
            <li>
              <Link 
                href="/" 
                className="text-gray-700 hover:text-indigo-600 transition-colors"
              >
                หน้าแรก
              </Link>
            </li>
            <li>
              <Link 
                href="/about" 
                className="text-gray-700 hover:text-indigo-600 transition-colors"
              >
                เกี่ยวกับเรา
              </Link>
            </li>
            {auth.user && (
              <li>
                <Link 
                  href="/dashboard" 
                  className="text-gray-700 hover:text-indigo-600 transition-colors"
                >
                  แดชบอร์ด
                </Link>
              </li>
            )}
          </ul>

          {auth.user ? (
            <div className="flex items-center space-x-4">
              <span className="text-md text-gray-700 font-bold">สวัสดี, {auth.user.name}</span>
              <Link 
                href="/logout" 
                method="post" 
                as="button"
                className="px-3 py-1.5 rounded text-sm bg-red-600 text-white hover:bg-red-700 transition-colors cursor-pointer"
              >
                ออกจากระบบ
              </Link>
            </div>
          ) : (
            <div className="flex items-center space-x-3">
              <Link
                href="/login"
                className="text-gray-700 hover:text-indigo-600 transition-colors text-sm"
              >
                เข้าสู่ระบบ
              </Link>
              <Link
                href="/register"
                className="px-3 py-1.5 rounded text-sm bg-indigo-600 text-white hover:bg-indigo-700 transition-colors"
              >
                ลงทะเบียน
              </Link>
            </div>
          )}
        </div>
      </div>
    </nav>
  )
} 

---
Step 7: เพิ่มตัวแปรสำหรับแชร์มาจาก HandleInertiaRequests.php
---
.
.
public function share(Request $request): array
    {
        return array_merge(parent::share($request), [
            'auth' => [
                'user' => $request->user() ? [
                    'id' => $request->user()->id,
                    'name' => $request->user()->name,
                    'email' => $request->user()->email,
                    'position' => $request->user()->position,
                    'avatar' => $request->user()->avatar,
                    'is_team' => $request->user()->is_team,
                ] : null,
            ],
        ]);
    }
.
.

---------------------------------
Workshop ระบบ Inventory Management
---------------------------------
Step 1: สร้างโปรเจ็กต์ใหม่แบบ intertia+react
---
composer create-project laravel/laravel laventory

Step 2: ทดสอบรันโปรเจ็กต์
---
composer dev

Step 3: สร้างฐานข้อมูลใน mysql
---
create database laventorydb;

Step 4: แก้ไข config ในไฟล์ .env
---
DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=laventorydb
DB_USERNAME=root
DB_PASSWORD=

Step 5: เพิ่มไฟล์ migrations
---

Step 6: เพิ่มไฟล์ seeder
---

Step 7: เพิ่มไฟล์ factories
---

Step 8: เพิ่มไฟล์ Model
---

Step 9: ติดตั้ง sanctum
---
composer require laravel/sanctum

Step 10: Setup API
---
php artisan install:api

Step 11: Generate Sanctum Config
---
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"

Step 12: รัน migration
---
php artisan migrate
php artisan migrate:refresh

Step 13: รัน db:seed
---
php artisan db:seed

---------------------------------
⚡ DAY 7
---------------------------------
8. Workshop ระบบ Inventory Management (ต่อ)
---------------------------------

Step 14: ติดตั้ง Inertia ฝั่ง Server-side (Laravel)
---
composer require inertiajs/inertia-laravel

Step 15: แก้ไขไฟล์ welcome.blade.php เป็น "app.blade.php"
---
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
    <title inertia>{{ config('app.name', 'Laravel') }}</title>
    @viteReactRefresh
    @vite(['resources/js/app.tsx', "resources/js/pages/{$page['component']}.tsx"])
    @inertiaHead
  </head>
  <body>
    @inertia
  </body>
</html>

Step 16: เพิ่ม Middleware สำหรับ Inertia
---
php artisan inertia:middleware

Step 17: Config Middleware ที่ไฟล์ "app.php"
---
\bootstrap\app.php
---
use App\Http\Middleware\HandleInertiaRequests;

->withMiddleware(function (Middleware $middleware) {
        $middleware->web(append: [
            HandleInertiaRequests::class,
        ]);
    })

Step 18:ติดตั้งฝั่ง Client-side (React)
---
npm install @inertiajs/react
npm install react
npm install react-dom
npm install typescript

npm install @types/react -D
npm install @types/react-dom -D
npm install @vitejs/plugin-react -D

Step 19: แก้ไฟล์ vite.config.js
---
import react from '@vitejs/plugin-react'
import laravel from 'laravel-vite-plugin'
import { defineConfig } from 'vite'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.tsx'],
            refresh: true,
        }),
        react(),
        tailwindcss(),
    ],
    esbuild: {
        jsx: 'automatic',
    },
})

Step: 20: สร้างหน้าหลักของ Inertia ที่ไฟล์ (app.tsx)
---
\resources\js\app.tsx
---
import '../css/app.css'

import { createInertiaApp } from '@inertiajs/react'
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers'
import { createRoot } from 'react-dom/client'

// ประกาศ type สำหรับ Vite
declare global {
  interface ImportMeta {
    env: {
      [key: string]: string | boolean | undefined
      VITE_APP_NAME?: string
    }
    glob: (path: string) => Record<string, () => Promise<unknown>>
  }
}

const appName = import.meta.env.VITE_APP_NAME || 'Laravel'

createInertiaApp({
  title: (title) => `${title} - ${appName}`,
  resolve: (name) => resolvePageComponent(`./pages/${name}.tsx`, import.meta.glob('./pages/**/*.tsx')),
  setup({ el, App, props }) {
    const root = createRoot(el);

    root.render(<App {...props} />)
  },
  progress: {
    color: '#4B5563',
  },
})

Step 21: ทำการสร้างไฟล์ tsconfig.json
---
npx tsc --init --rootDir .

แก้ไขไฟล์ tsconfig.json ดังนี้
---
{
  "compilerOptions": {
    "allowJs": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "jsx": "react-jsx",
    "strict": true,
    "isolatedModules": true,
    "target": "ESNext",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./resources/js/*"],
    },
    "types": ["vite/client"]
  },
  "include": ["resources/js/**/*.ts", "resources/js/**/*.tsx"],
  "exclude": ["node_modules", "public", "resources/css"]
} 


Step 22: สร้างไฟล์ welcome.tsx และ about.tsx
---
resources\js\pages\welcome.tsx
---
import { Link } from '@inertiajs/react'

export default function Welcome() {
  return (
    <div>
      <div className='text-3xl text-green-600'>Welcome Page</div>
    </div>
  )
}

Step 23: แก้ไขไฟล์ route (web.php)
---
\routes\web.php
---
<?php

use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

Route::get('/', function () {
    return Inertia::render('Welcome');
})->name('welcome');

Step 24: สร้าง page "Welcome.tsx"
---
import React, { useState, useEffect } from 'react'
import { Link } from '@inertiajs/react'
import { Head } from '@inertiajs/react'

export default function Welcome() {

  // สร้างตัวแปรสำหรับกำหนด dark mode
  const [darkMode, setDarkMode] = useState(false)

  // เพิ่ม dark mode
  useEffect(() => {
    // ตรวจสอบ system preference
    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches
    const savedDarkMode = localStorage.getItem('darkMode')

    // ถ้ามีค่าใน localStorage ให้ใช้ค่านั้น ไม่งั้นใช้ค่า system preference
    const isDarkMode = savedDarkMode !== null ? savedDarkMode === 'true' : prefersDarkMode
    setDarkMode(isDarkMode)
    
    if (isDarkMode) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  })

  // ฟังก์ชันสำหรับเปลี่ยน mode เป็น dark/light
  const toggleDarkMode = () => {

    const newDarkMode = !darkMode
    setDarkMode(newDarkMode)

    // บันทึกลง localStorage
    localStorage.setItem('darkMode', String(newDarkMode))
    
    if (newDarkMode) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }

  }

  return (
    <>
      <Head>
          <title>Welcome</title>
          <meta name="description" content="Welcome page description" />
      </Head>
        
      <div className="bg-white dark:bg-black text-gray-800 dark:text-gray-200 min-h-screen">
        
        {/* Navigation */}
        <nav className="fixed top-0 left-0 right-0 p-4 w-full z-10 bg-white/80 dark:bg-black/80 backdrop-blur-sm border-b border-gray-100 dark:border-gray-800">
          <div className="flex justify-between max-w-6xl mx-auto">
            <div className="flex items-center">
              <Link href="/" className="flex items-center gap-2">
                <img src="/static/logo.svg" width="110" height="32" alt="IMS-Thai" className="h-8" />
              </Link>
            </div>
            
            <div className="flex items-center gap-2">

                {/* ลิงก์เข้าสู่ระบบ/ลงทะเบียน */}
                  <Link
                  href="#"
                  className="px-3 py-1.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors"
                  >
                  เข้าสู่ระบบ
                  </Link>
                  <Link
                      href="#"
                      className="px-3 py-1.5 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-700 rounded-md transition-colors"
                  >
                      ลงทะเบียน
                  </Link>
            </div>
                
              {/* Dark mode toggle */}
              <button 
                onClick={toggleDarkMode}
                className="w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800"
                aria-label={darkMode ? "เปลี่ยนเป็นโหมดสว่าง" : "เปลี่ยนเป็นโหมดมืด"}
              >
                {darkMode ? (
                  <svg className="w-5 h-5 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                ) : (
                  <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                  </svg>
                )}
              </button>

            </div>
        </nav>

        {/* Main Content */}
        <div className="container mx-auto px-4 py-16 max-w-5xl">
          <div className="mt-16 flex flex-col items-center">
            {/* Technology Cards */}
            <div className="mt-8 grid grid-cols-1 sm:grid-cols-3 gap-8 w-full max-w-4xl mx-auto">
              <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 flex flex-col items-center text-center hover:shadow-md transition-shadow">
                <div className="w-12 h-12 rounded-full flex items-center justify-center text-red-500">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"></path>
                    <line x1="16" y1="8" x2="2" y2="22"></line>
                    <line x1="17.5" y1="15" x2="9" y2="15"></line>
                  </svg>
                </div>
                <h3 className="mt-4 text-lg font-medium text-gray-900 dark:text-white">Laravel</h3>
                <p className="mt-2 text-sm text-gray-500 dark:text-gray-400 max-w-xs">
                  เฟรมเวิร์ค PHP ที่มีเครื่องมือครบครันสำหรับการพัฒนาเว็บแอปพลิเคชัน
                </p>
              </div>

              <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 flex flex-col items-center text-center hover:shadow-md transition-shadow">
                <div className="w-12 h-12 rounded-full flex items-center justify-center text-purple-500">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round">
                    <polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon>
                  </svg>
                </div>
                <h3 className="mt-4 text-lg font-medium text-gray-900 dark:text-white">Inertia.js</h3>
                <p className="mt-2 text-sm text-gray-500 dark:text-gray-400 max-w-xs">
                  เชื่อมต่อแอปพลิเคชัน Laravel กับ React โดยไม่ต้องสร้าง API
                </p>
              </div>

              <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 flex flex-col items-center text-center hover:shadow-md transition-shadow">
                <div className="w-12 h-12 rounded-full flex items-center justify-center text-blue-500">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <circle cx="12" cy="12" r="4"></circle>
                    <line x1="4.93" y1="4.93" x2="9.17" y2="9.17"></line>
                    <line x1="14.83" y1="14.83" x2="19.07" y2="19.07"></line>
                    <line x1="14.83" y1="9.17" x2="19.07" y2="4.93"></line>
                  </svg>
                </div>
                <h3 className="mt-4 text-lg font-medium text-gray-900 dark:text-white">React</h3>
                <p className="mt-2 text-sm text-gray-500 dark:text-gray-400 max-w-xs">
                  ไลบรารี JavaScript สำหรับสร้าง UI แบบโมเดิร์น รวดเร็ว และตอบสนองผู้ใช้
                </p>
              </div>
            </div>

            {/* Features */}
            <div className="mt-20 w-full max-w-4xl mx-auto">
              <h2 className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-8">
                คุณสมบัติหลัก
              </h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 sm:p-6 hover:shadow-md transition-shadow">
                  <div className="flex">
                    <div className="flex-shrink-0 bg-blue-100 dark:bg-blue-900/30 rounded-lg p-3">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                      </svg>
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white">จัดการสินค้า</h3>
                      <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                        บริหารสินค้าคงคลังแบบเรียลไทม์ ติดตามสต็อกได้อย่างแม่นยำ
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 sm:p-6 hover:shadow-md transition-shadow">
                  <div className="flex">
                    <div className="flex-shrink-0 bg-green-100 dark:bg-green-900/30 rounded-lg p-3">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-600 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white">รายงานสรุป</h3>
                      <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                        ดูรายงานและข้อมูลสถิติที่สำคัญเพื่อการวิเคราะห์และตัดสินใจ
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <footer className="mb-0 py-6 border-t border-gray-200 dark:border-gray-800 bg-white dark:bg-black">
          <div className="container mx-auto px-4 max-w-5xl">
            <div className="flex flex-col items-center justify-center text-center">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                พัฒนาด้วย <span className="text-red-500">♥</span> โดย ITGenius
              </p>
              <p className="mt-2 text-sm text-gray-500 dark:text-gray-500">
                © {new Date().getFullYear()} IMS-Thai. สงวนลิขสิทธิ์
              </p>
            </div>
          </div>
        </footer>
      </div>
        
    </>
  )
}

Step 25: แก้ไขไฟล์ app.css
---
\resources\css\app.css
---
@import url('https://fonts.googleapis.com/css2?family=Anuphan:wght@100..700&display=swap');
@import 'tailwindcss';

@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';
@source '../../storage/framework/views/*.php';
@source '../**/*.blade.php';
@source '../**/*.js';

/* Custom variant for dark mode */
@custom-variant dark (&:where(.dark, .dark *));

@theme {
    --font-sans: 'Anuphan', ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
        'Segoe UI Symbol', 'Noto Color Emoji';
}


Step 26: Layout สำหรับผู้ใช้ (Guest)
---
\resources\js\Layouts\GuestLayout.tsx
---
import { PropsWithChildren, useState, useEffect } from 'react'
import { Link } from '@inertiajs/react'

export default function Guest({ children }: PropsWithChildren) {

  const [_, setDarkMode] = useState(false)

  // เพิ่ม dark mode
  useEffect(() => {
    // ตรวจสอบ system preference
    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches
    const savedDarkMode = localStorage.getItem('darkMode')
    
    // ถ้ามีค่าใน localStorage ให้ใช้ค่านั้น ไม่งั้นใช้ค่า system preference
    const isDarkMode = savedDarkMode !== null ? savedDarkMode === 'true' : prefersDarkMode
    setDarkMode(isDarkMode)
    
    if (isDarkMode) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }, [])

  return (
    <div className="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-black">
      
      <div>
        <Link href="/" className="flex justify-center">
          <img src="/static/logo.svg" width="110" height="32" alt="IMS-Thai" />
        </Link>
      </div>

      <div className="w-full sm:max-w-md mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
        {/* BEGIN: Content */}
        {children}
        {/* END: Content */}
      </div>
      
    </div>
  )
} 

Step 27: สร้างหน้า Login.tsx ไว้ใน 
\resources\js\pages\Auth\Login.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'

export default function Login() {
  return (
    <GuestLayout>
        <Head>
            <title>Login</title>
            <meta name="description" content="Welcome page description" />
        </Head>

        <form>
            <div>
                <h1>Login</h1>
            </div>
        </form>
    </GuestLayout>
  )
}


Step 28: แก้ไขไฟล์ web.php
---
<?php

use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

Route::get('/', function () {
    return Inertia::render('Welcome');
})->name('welcome');

Route::get('/login', function () {
    return Inertia::render('Auth/Login');
})->name('login');


Step 29: สร้างหน้า Register.tsx ไว้ใน 
\resources\js\pages\Auth\Regiser.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'

export default function Register() {
  return (
    <GuestLayout>
        <Head>
            <title>Register</title>
            <meta name="description" content="Welcome page description" />
        </Head>

        <form>
            <div>
                <h1>Reister</h1>
            </div>
        </form>
    </GuestLayout>
  )
}

Step 30: แก้ไขไฟล์ web.php
---
<?php

use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

Route::get('/', function () {
    return Inertia::render('Welcome');
})->name('welcome');

Route::get('/login', function () {
    return Inertia::render('Auth/Login');
})->name('login');

Route::get('/register', function () {
    return Inertia::render('Auth/Register');
})->name('register');

Step 31: แก้ลิงก์เมนูที่หน้า Welcome.tsx
---
.
{/* ลิงก์เข้าสู่ระบบ/ลงทะเบียน */}
                  <Link
                    href="/login"
                    className="px-3 py-1.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors"
                  >
                    เข้าสู่ระบบ
                  </Link>
                  <Link
                      href="/register"
                      className="px-3 py-1.5 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-700 rounded-md transition-colors"
                  >
                    ลงทะเบียน
                  </Link>
.

Step 32: สร้าง Component สำหรับไว้รับข้อมูล Text
---
\resources\js\Components\TextInput.tsx
---
import { forwardRef, InputHTMLAttributes } from 'react'

interface TextInputProps extends InputHTMLAttributes<HTMLInputElement> {
  error?: string
}

const TextInput = forwardRef<HTMLInputElement, TextInputProps>(
  ({ className = '', error, ...props }, ref) => (
    <input
      {...props}
      ref={ref}
      className={`mt-1 block w-full rounded-md 
        border border-gray-300 dark:border-gray-600 
        bg-white dark:bg-gray-900 
        text-gray-900 dark:text-gray-100 
        placeholder-gray-400 dark:placeholder-gray-500
        shadow-sm 
        focus:outline-none focus:ring-2 focus:ring-offset-2
        focus:border-blue-500 focus:ring-blue-500/20 
        dark:focus:border-blue-400 dark:focus:ring-blue-400/20
        disabled:bg-gray-50 dark:disabled:bg-gray-800
        disabled:text-gray-500 dark:disabled:text-gray-400
        disabled:cursor-not-allowed
        sm:text-sm
        transition-all duration-200 ease-in-out
        ${error ? 'border-red-500 dark:border-red-500 focus:border-red-500 focus:ring-red-500/20 dark:focus:border-red-400 dark:focus:ring-red-400/20' : ''} 
        ${className}`}
    />
  )
)

TextInput.displayName = 'TextInput'

export default TextInput 

---
Step 33: สร้าง Component สำหรับไว้สำหรับแสดง label ของตัว Input
---
\resources\js\Components\InputLabel.tsx
---
import { ReactNode } from 'react'

interface InputLabelProps {
  value?: ReactNode
  htmlFor?: string
  children?: ReactNode
  className?: string
  required?: boolean
}

export default function InputLabel({ value, htmlFor, className = '', children, required = false }: InputLabelProps) {
  return (
    <label htmlFor={htmlFor} className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 ${className}`}>
      {value || children}
      {required && <span className="text-red-600 dark:text-red-400 ml-1">*</span>}
    </label>
  )
}

---
Step 34: เรียกใช้งานที่หน้า Login.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import TextInput from '@/Components/TextInput'
import InputLabel from '@/Components/InputLabel'

export default function Login() {
  return (
    <GuestLayout>
        <Head>
            <title>Login</title>
            <meta name="description" content="Welcome page description" />
        </Head>

        <form>

            <div>
                <InputLabel htmlFor='email' value='อีเมล์'/>
                <TextInput
                  id='email'
                  type='email'
                  name='email'
                  value='demo@email.com'
                  className="mt-1 p-2 block w-full"
                />
            </div>

            <div className="mt-4">
                <InputLabel htmlFor='password' value='รหัสผ่าน'/>
                <TextInput
                  id='password'
                  type='password'
                  name='password'
                  value='******'
                  className="mt-1 p-2 block w-full"
                />
            </div>

            {/* Login Button */}
            <div className="flex items-center justify-end mt-4">
              <Link
                href="/register"
                className="text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 mr-4"
              >
                ลงทะเบียน
              </Link>

              <button
                type="submit"
                className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150 ml-4"
              >
                เข้าสู่ระบบ
              </button>
              
            </div>

        </form>
    </GuestLayout>
  )
}

---
Step 35: สร้าง Component "InputError.tsx" ไว้แสดง error ในฟอร์ม
----
interface InputErrorProps {
  message?: string
  className?: string
}

export default function InputError({ message, className = '' }: InputErrorProps) {
  if (!message) {
    return null
  }

  return (
    <div className={`text-sm text-red-600 dark:text-red-400 mt-2 ${className}`}>
      {message}
    </div>
  )
} 

---
Step 36: เรียกใช้ InputError ที่หน้า Login.tsx
----
import InputError from '@/Components/InputError'
.
<InputError message='This field is required' />
.

---
Step 37: แก้ไขหน้า Register.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import TextInput from '@/Components/TextInput'
import InputLabel from '@/Components/InputLabel'
import InputError from '@/Components/InputError'

export default function Register() {
  return (
    <GuestLayout>
        <Head>
            <title>Register</title>
            <meta name="description" content="Register page description" />
        </Head>

        <form>

          <div>
                <InputLabel htmlFor='name' value='ชื่อ'/>
                <TextInput
                  id='name'
                  type='text'
                  name='name'
                  value='Samit'
                  className="mt-1 p-2 block w-full"
                />
                <InputError message='This field is required' />
            </div>

            <div className="mt-4">
                <InputLabel htmlFor='email' value='อีเมล์'/>
                <TextInput
                  id='email'
                  type='email'
                  name='email'
                  value='demo@email.com'
                  className="mt-1 p-2 block w-full"
                />
                <InputError message='This field is required' />
            </div>

            <div className="mt-4">
                <InputLabel htmlFor='password' value='รหัสผ่าน'/>
                <TextInput
                  id='password'
                  type='password'
                  name='password'
                  value='******'
                  className="mt-1 p-2 block w-full"
                />
                <InputError message='This field is required' />
            </div>

            <div className="mt-4">
                <InputLabel htmlFor='password_confirmation' value='ยืนยันรหัสผ่าน'/>
                <TextInput
                  id='password_confirmation'
                  type='password'
                  name='password_confirmation'
                  value='******'
                  className="mt-1 p-2 block w-full"
                />
                <InputError message='This field is required' />
            </div>

            {/* Register Button */}
            <div className="flex items-center justify-end mt-4">
              <Link
                href="/login"
                className="text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 mr-4"
              >
                มีบัญชีอยู่แล้ว เข้าสู่ระบบ
              </Link>

              <button
                type="submit"
                className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150 ml-4"
              >
                ลงทะเบียน
              </button>

            </div>

        </form>
    </GuestLayout>
  )
}

---
Step 38: สร้างหน้า ForgotPassword.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import TextInput from '@/Components/TextInput'
import InputLabel from '@/Components/InputLabel'
import InputError from '@/Components/InputError'

export default function ForgotPassword() {
    return (
        <GuestLayout>
            <Head>
                <title>ลืมรหัสผ่าน</title>
                <meta name="description" content="Fogotpassword page description" />
            </Head>

            <form>
                <div>
                    <InputLabel htmlFor="email" value="อีเมล" />

                    <TextInput
                        id="email"
                        type="email"
                        name="email"
                        className="mt-1 p-2 block w-full"
                        autoFocus
                    />

                    <InputError message="This field is required" />
                </div>

                <div className="flex items-center justify-between mt-4">
                    <Link
                        href="/login"
                        className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                        กลับไปหน้าเข้าสู่ระบบ
                    </Link>

                    <button 
                        type="submit" 
                        className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150"
                    >
                        ส่งลิงก์รีเซ็ตรหัสผ่าน
                    </button>
                </div>
            </form>
        </GuestLayout>
    )
}

---
Step 39: สร้างหน้า ResetPassword.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import TextInput from '@/Components/TextInput'
import InputLabel from '@/Components/InputLabel'
import InputError from '@/Components/InputError'

export default function ResetPassword() {
    return (
        <GuestLayout>
            <Head>
                <title>รีเซ็ตรหัสผ่าน</title>
                <meta name="description" content="Reset password page description" />
            </Head>

            <div className="mb-4 text-center">
                <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">รีเซ็ตรหัสผ่าน</h1>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">กำหนดรหัสผ่านใหม่สำหรับบัญชีของคุณ</p>
            </div>

            <form>
                <div>
                    <InputLabel htmlFor="email" value="อีเมล" />

                    <TextInput
                        id="email"
                        type="email"
                        name="email"
                        className="mt-1 p-2 block w-full"
                        autoFocus
                    />

                    <InputError message="This field is required" />
                </div>

                <div className="mt-4">
                    <InputLabel htmlFor='password' value='รหัสผ่านใหม่'/>
                    <TextInput
                    id='password'
                    type='password'
                    name='password'
                    value='******'
                    className="mt-1 p-2 block w-full"
                    />
                    <InputError message='This field is required' />
                </div>

                <div className="mt-4">
                    <InputLabel htmlFor='password_confirmation' value='ยืนยันรหัสผ่านใหม่'/>
                    <TextInput
                    id='password_confirmation'
                    type='password'
                    name='password_confirmation'
                    value='******'
                    className="mt-1 p-2 block w-full"
                    />
                    <InputError message='This field is required' />
                </div>

                <div className="flex items-center justify-between mt-4">
                    <Link
                        href="/login"
                        className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                        กลับไปหน้าเข้าสู่ระบบ
                    </Link>

                    <button 
                        type="submit" 
                        className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150"
                    >
                        รีเซ็ตรหัสผ่าน
                    </button>
                </div>
            </form>
        </GuestLayout>
    )
}

---
Step 40: สร้างหน้า ConfirmPassword.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import TextInput from '@/Components/TextInput'
import InputLabel from '@/Components/InputLabel'
import InputError from '@/Components/InputError'

export default function ConfirmPassword() {
    return (
        <GuestLayout>
            <Head>
                <title>ยืนยันรหัสผ่าน</title>
                <meta name="description" content="Comfirmed password page description" />
            </Head>

            <div className="mb-4 text-center">
                <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">ยืนยันรหัสผ่าน</h1>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">เพื่อความปลอดภัย โปรดยืนยันรหัสผ่านของคุณก่อนดำเนินการต่อ</p>
            </div>

            <form>

                <div className="mt-4">
                    <InputLabel htmlFor='password' value='รหัสผ่าน'/>
                    <TextInput
                    id='password'
                    type='password'
                    name='password'
                    value='******'
                    className="mt-1 p-2 block w-full"
                    />
                    <InputError message='This field is required' />
                </div>

                <div className="flex items-center justify-between mt-4">
                    <button 
                        type="submit" 
                        className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150"
                    >
                        ยืนยัน
                    </button>
                </div>
            </form>
        </GuestLayout>
    )
}

---
Step 41: VerifyEmail.tsx
----
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'

export default function VerifyEmail() {
    return (
        <GuestLayout>
            <Head>
                <title>ยืนยันอีเมลของคุณ</title>
                <meta name="description" content="VerifyEmail email page description" />
            </Head>

            <div className="mb-4 text-center">
                <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">ยืนยันอีเมลของคุณ</h1>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1"> ขอบคุณสำหรับการลงทะเบียน! ก่อนเริ่มใช้งาน โปรดยืนยันอีเมลของคุณโดยคลิกที่ลิงก์ที่เราได้ส่งไปให้คุณทางอีเมล
                หากคุณไม่ได้รับอีเมล เราจะส่งอีกฉบับให้คุณ</p>
            </div>

            <form>
                <div className="mt-4 flex items-center justify-between">
                    <button 
                        type="submit" 
                        className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150"
                    >
                        ส่งอีเมลยืนยันอีกครั้ง
                    </button>

                    <Link
                        href="/logout"
                        method="post"
                        as="button"
                        type="button"
                        className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                        ออกจากระบบ
                    </Link>
                </div>
            </form>
        </GuestLayout>
    )
}

---
Step 42: แก้ไข web.php
---
<?php

use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

Route::get('/', function () {
    return Inertia::render('Welcome');
})->name('welcome');

Route::get('/login', function () {
    return Inertia::render('Auth/Login');
})->name('login');

Route::get('/register', function () {
    return Inertia::render('Auth/Register');
})->name('register');

Route::get('/forgotpassword', function () {
    return Inertia::render('Auth/ForgotPassword');
})->name('forgotpassword');

Route::get('/resetpassword', function () {
    return Inertia::render('Auth/ResetPassword');
})->name('resetpassword');

Route::get('/confirmpassword', function () {
    return Inertia::render('Auth/ConfirmPassword');
})->name('confirmpassword');

Route::get('/verifyemail', function () {
    return Inertia::render('Auth/VerifyEmail');
})->name('verifyemail');

---
Step 43: แก้ไขหน้า Login.tsx ใส่ลืมรหัสผ่าน
----
.
<div className="flex items-center justify-between mt-4 mb-8">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  name="remember"
                  className="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500"
                />
                <span className="ml-2 text-sm text-gray-600">จดจำฉัน</span>
              </label>
              <Link
                href="/forgotpassword"
                className="text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                ลืมรหัสผ่าน?
              </Link>
            </div>
.

---------------------------------
⚡ DAY 8
---------------------------------
8. Workshop ระบบ Inventory Management (ต่อ)
---------------------------------
เมื่อได้โปรเจ็กต์มา
---
1. ติดตั้ง library ของ nodejs
---
npm install

2. ติดตั้ง library ของ laravel
---
composer install

3. ทำการ migrate database และ seed
---
php artisan migrate
php artisan db:seed

4: ทดสอบรันโปรเจ็กต์
---
composer dev

----
Workshop ระบบ Inventory Management (ต่อ)
----
Step 1: ติดตั้ง Library สำหรับให้ JavaScript สามารถเข้าถึง Route ใน Laravelได้
---
composer require tightenco/ziggy
npm install ziggy-js

Step 2: Config ให้สามารถใช้งาน Ziggy ในโปรเจ็กต์ inertia กับ React ได้
---
resources/js/app.tsx
---
import { route as routeFn } from 'ziggy-js'

// ประกาศ type สำหรับ Ziggy
declare global {
  const route: typeof routeFn;
}

---
esources\views\app.blade.php
---
{{-- การเรียกใช้ route ของ ziggy  --}}
    @routes

Step 3: เพิ่มตัวแปรที่จะแชร์มายังหน้า React ทีไฟล์ 
---
app\Http\Middleware\HandleInertiaRequests.php
---
public function share(Request $request): array
    {
        return array_merge(parent::share($request), [
            'auth' => [
                'user'=> $request->user(),
            ]
        ]);
    }

Step 4: กำหนดค่าเริ่มต้นให้ App เราเป็นภาษาไทย
---
ที่ไฟล์ .env
----
# กำหนดค่า locale ของแอปพลิเคชัน
APP_LOCALE=th
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

Step 5: การกำหนดตัวข้อความที่ใช้แปลแต่ละภาษา
---
สร้างโฟลเดอร์ภาษาไว้ที่ resources/lang/th
---
resources/lang/th/validation.php
---
<?php

return [
    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */

    'accepted' => 'กรุณายอมรับ :attribute',
    'accepted_if' => 'กรุณายอมรับ :attribute เมื่อ :other เป็น :value',
    'active_url' => ':attribute ไม่ใช่ URL ที่ถูกต้อง',
    'after' => ':attribute ต้องเป็นวันหลังจาก :date',
    'after_or_equal' => ':attribute ต้องเป็นวันหลังจากหรือเท่ากับ :date',
    'alpha' => ':attribute ต้องประกอบด้วยตัวอักษรเท่านั้น',
    'alpha_dash' => ':attribute ต้องประกอบด้วยตัวอักษร ตัวเลข เครื่องหมายขีดกลาง และเครื่องหมายขีดล่างเท่านั้น',
    'alpha_num' => ':attribute ต้องประกอบด้วยตัวอักษรและตัวเลขเท่านั้น',
    'array' => ':attribute ต้องเป็นอาร์เรย์',
    'before' => ':attribute ต้องเป็นวันก่อน :date',
    'before_or_equal' => ':attribute ต้องเป็นวันก่อนหรือเท่ากับ :date',
    'between' => [
        'numeric' => ':attribute ต้องอยู่ระหว่าง :min และ :max',
        'file' => ':attribute ต้องมีขนาดระหว่าง :min และ :max กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวระหว่าง :min และ :max ตัวอักษร',
        'array' => ':attribute ต้องมีจำนวนระหว่าง :min และ :max รายการ',
    ],
    'boolean' => ':attribute ต้องเป็นจริงหรือเท็จเท่านั้น',
    'confirmed' => 'การยืนยัน :attribute ไม่ตรงกัน',
    'current_password' => 'รหัสผ่านไม่ถูกต้อง',
    'date' => ':attribute ไม่ใช่วันที่ที่ถูกต้อง',
    'date_equals' => ':attribute ต้องเป็นวันที่เท่ากับ :date',
    'date_format' => ':attribute ไม่ตรงกับรูปแบบ :format',
    'declined' => ':attribute ต้องถูกปฏิเสธ',
    'declined_if' => ':attribute ต้องถูกปฏิเสธเมื่อ :other เป็น :value',
    'different' => ':attribute และ :other ต้องแตกต่างกัน',
    'digits' => ':attribute ต้องเป็น :digits หลัก',
    'digits_between' => ':attribute ต้องมีความยาวระหว่าง :min และ :max หลัก',
    'dimensions' => ':attribute มีขนาดของรูปภาพไม่ถูกต้อง',
    'distinct' => ':attribute มีค่าที่ซ้ำกัน',
    'email' => ':attribute ต้องเป็นอีเมลที่ถูกต้อง',
    'ends_with' => ':attribute ต้องลงท้ายด้วย: :values',
    'enum' => ':attribute ที่เลือกไม่ถูกต้อง',
    'exists' => ':attribute ที่เลือกไม่ถูกต้อง',
    'file' => ':attribute ต้องเป็นไฟล์',
    'filled' => ':attribute ต้องมีค่า',
    'gt' => [
        'numeric' => ':attribute ต้องมากกว่า :value',
        'file' => ':attribute ต้องมีขนาดมากกว่า :value กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวมากกว่า :value ตัวอักษร',
        'array' => ':attribute ต้องมีมากกว่า :value รายการ',
    ],
    'gte' => [
        'numeric' => ':attribute ต้องมากกว่าหรือเท่ากับ :value',
        'file' => ':attribute ต้องมีขนาดมากกว่าหรือเท่ากับ :value กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวมากกว่าหรือเท่ากับ :value ตัวอักษร',
        'array' => ':attribute ต้องมีอย่างน้อย :value รายการ',
    ],
    'image' => ':attribute ต้องเป็นรูปภาพ',
    'in' => ':attribute ที่เลือกไม่ถูกต้อง',
    'in_array' => ':attribute ไม่มีอยู่ใน :other',
    'integer' => ':attribute ต้องเป็นจำนวนเต็ม',
    'ip' => ':attribute ต้องเป็นที่อยู่ IP ที่ถูกต้อง',
    'ipv4' => ':attribute ต้องเป็นที่อยู่ IPv4 ที่ถูกต้อง',
    'ipv6' => ':attribute ต้องเป็นที่อยู่ IPv6 ที่ถูกต้อง',
    'json' => ':attribute ต้องเป็นสตริง JSON ที่ถูกต้อง',
    'lt' => [
        'numeric' => ':attribute ต้องน้อยกว่า :value',
        'file' => ':attribute ต้องมีขนาดน้อยกว่า :value กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวน้อยกว่า :value ตัวอักษร',
        'array' => ':attribute ต้องมีน้อยกว่า :value รายการ',
    ],
    'lte' => [
        'numeric' => ':attribute ต้องน้อยกว่าหรือเท่ากับ :value',
        'file' => ':attribute ต้องมีขนาดน้อยกว่าหรือเท่ากับ :value กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวน้อยกว่าหรือเท่ากับ :value ตัวอักษร',
        'array' => ':attribute ต้องไม่มีมากกว่า :value รายการ',
    ],
    'mac_address' => ':attribute ต้องเป็นที่อยู่ MAC ที่ถูกต้อง',
    'max' => [
        'numeric' => ':attribute ต้องไม่มากกว่า :max',
        'file' => ':attribute ต้องมีขนาดไม่เกิน :max กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวไม่เกิน :max ตัวอักษร',
        'array' => ':attribute ต้องมีไม่เกิน :max รายการ',
    ],
    'mimes' => ':attribute ต้องเป็นไฟล์ประเภท: :values',
    'mimetypes' => ':attribute ต้องเป็นไฟล์ประเภท: :values',
    'min' => [
        'numeric' => ':attribute ต้องมีค่าอย่างน้อย :min',
        'file' => ':attribute ต้องมีขนาดอย่างน้อย :min กิโลไบต์',
        'string' => ':attribute ต้องมีความยาวอย่างน้อย :min ตัวอักษร',
        'array' => ':attribute ต้องมีอย่างน้อย :min รายการ',
    ],
    'multiple_of' => ':attribute ต้องเป็นจำนวนเท่าของ :value',
    'not_in' => ':attribute ที่เลือกไม่ถูกต้อง',
    'not_regex' => 'รูปแบบของ :attribute ไม่ถูกต้อง',
    'numeric' => ':attribute ต้องเป็นตัวเลข',
    'password' => 'รหัสผ่านไม่ถูกต้อง',
    'present' => ':attribute ต้องมีอยู่',
    'prohibited' => ':attribute ไม่ได้รับอนุญาต',
    'prohibited_if' => ':attribute ไม่ได้รับอนุญาตเมื่อ :other เป็น :value',
    'prohibited_unless' => ':attribute ไม่ได้รับอนุญาตเว้นแต่ :other อยู่ใน :values',
    'prohibits' => ':attribute ไม่อนุญาตให้ :other มีอยู่',
    'regex' => 'รูปแบบของ :attribute ไม่ถูกต้อง',
    'required' => 'กรุณากรอก :attribute',
    'required_array_keys' => ':attribute ต้องมีรายการสำหรับ: :values',
    'required_if' => ':attribute จำเป็นเมื่อ :other เป็น :value',
    'required_unless' => ':attribute จำเป็นเว้นแต่ :other อยู่ใน :values',
    'required_with' => ':attribute จำเป็นเมื่อมี :values',
    'required_with_all' => ':attribute จำเป็นเมื่อมี :values ทั้งหมด',
    'required_without' => ':attribute จำเป็นเมื่อไม่มี :values',
    'required_without_all' => ':attribute จำเป็นเมื่อไม่มี :values ใดเลย',
    'same' => ':attribute และ :other ต้องตรงกัน',
    'size' => [
        'numeric' => ':attribute ต้องเท่ากับ :size',
        'file' => ':attribute ต้องมีขนาด :size กิโลไบต์',
        'string' => ':attribute ต้องมีความยาว :size ตัวอักษร',
        'array' => ':attribute ต้องมี :size รายการ',
    ],
    'starts_with' => ':attribute ต้องขึ้นต้นด้วยหนึ่งใน: :values',
    'string' => ':attribute ต้องเป็นสตริง',
    'timezone' => ':attribute ต้องเป็นโซนเวลาที่ถูกต้อง',
    'unique' => ':attribute ถูกใช้ไปแล้ว',
    'uploaded' => ':attribute อัปโหลดล้มเหลว',
    'url' => ':attribute ต้องเป็น URL ที่ถูกต้อง',
    'uuid' => ':attribute ต้องเป็น UUID ที่ถูกต้อง',

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | Here you may specify custom validation messages for attributes using the
    | convention "attribute.rule" to name the lines. This makes it quick to
    | specify a specific custom language line for a given attribute rule.
    |
    */

    'custom' => [
        'name' => [
            'required' => 'กรุณากรอกชื่อของคุณ',
            'string' => 'ชื่อต้องเป็นข้อความ',
            'max' => 'ชื่อต้องมีความยาวไม่เกิน :max ตัวอักษร',
        ],
        'username' => [
            'required' => 'กรุณากรอกชื่อผู้ใช้ของคุณ',
            'string' => 'ชื่อผู้ใช้ต้องเป็นข้อความ',
            'max' => 'ชื่อผู้ใช้ต้องมีความยาวไม่เกิน :max ตัวอักษร',
            'unique' => 'ชื่อผู้ใช้นี้ถูกใช้ไปแล้ว',
            'alpha_dash' => 'ชื่อผู้ใช้ต้องประกอบด้วยตัวอักษร ตัวเลข เครื่องหมายขีดกลาง และเครื่องหมายขีดล่างเท่านั้น',
        ],
        'email' => [
            'required' => 'กรุณากรอกอีเมลของคุณ',
            'string' => 'อีเมลต้องเป็นข้อความ',
            'email' => 'กรุณากรอกอีเมลที่ถูกต้อง',
            'max' => 'อีเมลต้องมีความยาวไม่เกิน :max ตัวอักษร',
            'unique' => 'อีเมลนี้ถูกใช้ไปแล้ว',
        ],
        'password' => [
            'required' => 'กรุณากรอกรหัสผ่านของคุณ',
            'confirmed' => 'การยืนยันรหัสผ่านไม่ตรงกัน',
        ],
        'terms-of-service' => [
            'required' => 'กรุณายอมรับข้อกำหนดและเงื่อนไขการใช้งาน',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Attributes
    |--------------------------------------------------------------------------
    |
    | The following language lines are used to swap our attribute placeholder
    | with something more reader friendly such as "E-Mail Address" instead
    | of "email". This simply helps us make our message more expressive.
    |
    */

    'attributes' => [
        'name' => 'ชื่อ',
        'username' => 'ชื่อผู้ใช้',
        'email' => 'อีเมล',
        'password' => 'รหัสผ่าน',
        'password_confirmation' => 'ยืนยันรหัสผ่าน',
        'terms-of-service' => 'ข้อกำหนดและเงื่อนไขการใช้งาน',
    ],
]; 

Step 6: ไฟล์สำหรับกการเก็บ Message ต่างๆ ในการ authen
---
resources/lang/th/auth.php
---
<?php

return [
    /*
    |--------------------------------------------------------------------------
    | Authentication Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used during authentication for various
    | messages that we need to display to the user. You are free to modify
    | these language lines according to your application's requirements.
    |
    */

    'failed' => 'อีเมลหรือรหัสผ่านไม่ถูกต้อง',
    'password' => 'รหัสผ่านที่กรอกไม่ถูกต้อง',
    'throttle' => 'คุณพยายามเข้าสู่ระบบมากเกินไป กรุณารอ :seconds วินาที',
    'login' => 'เข้าสู่ระบบ',
    'register' => 'ลงทะเบียน',
    'email' => 'อีเมล',
    'password' => 'รหัสผ่าน',
    'remember_me' => 'จดจำฉัน',
    'forgot_password' => 'ลืมรหัสผ่าน?',
    'reset_password' => 'รีเซ็ตรหัสผ่าน',
    'confirm_password' => 'ยืนยันรหัสผ่าน',
    'name' => 'ชื่อ',
    'already_registered' => 'มีบัญชีอยู่แล้ว?',
    'no_account' => 'ยังไม่มีบัญชี?',
    'logout' => 'ออกจากระบบ',
    'profile' => 'โปรไฟล์',
    'settings' => 'ตั้งค่า',
    
    // ข้อความสำหรับการรีเซ็ตรหัสผ่าน
    'passwords' => [
        'reset' => 'รหัสผ่านของคุณได้รับการรีเซ็ตแล้ว',
        'sent' => 'เราได้ส่งลิงก์รีเซ็ตรหัสผ่านไปยังอีเมลของคุณแล้ว',
        'throttled' => 'กรุณารอสักครู่ก่อนลองอีกครั้ง',
        'token' => 'โทเค็นรีเซ็ตรหัสผ่านไม่ถูกต้อง',
        'user' => 'ไม่พบผู้ใช้ที่มีอีเมลนี้ในระบบ',
    ],
]; 

Step 7: สร้างไฟล์ RegisterRequest.php
---
\app\Http\Requests\Auht\RegisterRequest.php
---
<?php

namespace App\Http\Requests\Auth;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rules;

class RegisterRequest extends FormRequest
{
    // ฟังก์ชันนี้จะใช้ในการกำหนดกฎการตรวจสอบข้อมูลที่ส่งเข้ามา
    public function authorize(): bool
    {
        return true;
    }

    // ฟังก์ชันนี้จะใช้ในการกำหนดกฎการตรวจสอบข้อมูลที่ส่งเข้ามา
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'username' => ['required', 'string', 'max:255', 'unique:' . User::class, 'alpha_dash:ascii'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:' . User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
            'terms-of-service' => ['accepted']
        ];

        // Password::defaults() จะใช้กฎการตรวจสอบรหัสผ่านที่กำหนดไว้ในไฟล์ config/auth.php
        // โดยจะมีความยาวอย่างน้อย 8 ตัวอักษร และต้องมีตัวอักษรพิมพ์ใหญ่ ตัวอักษรพิมพ์เล็ก และตัวเลข
    }

    
    // ฟังก์ชันนี้แสดงค่าความหมายของกฎการตรวจสอบข้อมูลที่ส่งเข้ามา
    public function attributes(): array
    {
        return [
            'name' => 'ชื่อ',
            'username' => 'ชื่อผู้ใช้',
            'email' => 'อีเมล',
            'password' => 'รหัสผ่าน',
            'terms-of-service' => 'ข้อกำหนดและเงื่อนไขการใช้งาน',
        ];
    }

    // ฟังก์ชันนี้แสดงข้อความ terms ของกฎการตรวจสอบข้อมูลที่ส่งเข้ามา
    public function messages(): array
    {
        return [
            'terms-of-service.accepted' => 'คุณต้องยอมรับข้อกำหนดและเงื่อนไขการใช้งาน',
        ];
    }
}


Step 8: สร้างไฟล์ RegisterController.php
---
\app\Http\Controllers\Auth\RegisteredUserController.php
---
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\RegisterRequest;
use App\Models\User;
// use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Inertia\Inertia;
use Inertia\Response;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): Response
    {
        return Inertia::render('Auth/Register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(RegisterRequest $request): RedirectResponse
    {
        $user = User::create([
            'name' => $request->name,
            'username' => $request->username,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect()->intended('/')->with('success', 'สมัครสมาชิกสำเร็จ!');
        // return redirect(RouteServiceProvider::HOME)->with('success', 'สมัครสมาชิกสำเร็จ!');
    }
}

Step 9: เพิ่ม route สำหรับการทำ auth
---
\routes\auth.php
----
<?php
use App\Http\Controllers\Auth\RegisteredUserController;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| เส้นทางสำหรับผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบ (Guest Routes)
|--------------------------------------------------------------------------
|
| เส้นทางในกลุ่มนี้จะใช้ middleware 'guest' ซึ่งจะอนุญาตให้เข้าถึงได้
| เฉพาะผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบเท่านั้น หากผู้ใช้เข้าสู่ระบบแล้ว
| จะถูกเปลี่ยนเส้นทางไปยังหน้าหลัก
|
*/

Route::middleware('guest')->group(function () {
    // การลงทะเบียนผู้ใช้ใหม่
    Route::get('register', [RegisteredUserController::class, 'create'])->name('register');  // แสดงฟอร์มลงทะเบียน
    Route::post('register', [RegisteredUserController::class, 'store']);  // บันทึกข้อมูลผู้ใช้ใหม่
});

แก้ไขไฟล์ web.php
---
// ทำการรวมเส้นทางที่เกี่ยวข้องกับการลงทะเบียนผู้ใช้ใหม่
require __DIR__.'/auth.php';


Step 10: แก้ไขหน้า Register.tsx เพื่อส่งค่าไปยัง Laravel
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import TextInput from '@/Components/TextInput'
import InputLabel from '@/Components/InputLabel'
import InputError from '@/Components/InputError'

interface RegisterForm {
  name: string
  email: string
  username: string
  password: string
  password_confirmation: string
  'terms-of-service': boolean
  [key: string]: string | boolean
}

export default function Register() {

  // ฟังก์ชันสำหรับจัดการการส่งฟอร์ม
  const { data, setData, post, processing, errors, reset } = useForm<RegisterForm>({
    name: '',
    email: '',
    username: '',
    password: '',
    password_confirmation: '',
    'terms-of-service': false,
  })

  // ฟังก์ชันสำหรับการ reset ข้อมูลฟอร์ม
  useEffect(() => {
    return () => {
      reset('password', 'password_confirmation')
    }
  }, [])

  // ฟังก์ชันสำหรับการ submit ฟอร์ม
  const submit: FormEventHandler = (e) => {
    e.preventDefault()
    
    // ตรวจสอบก่อนส่งข้อมูล
    if (!data['terms-of-service']) {
      setData('terms-of-service', false)
    }
    
    post(route('register'))
  }

  return (
    <GuestLayout>
        <Head>
            <title>Register</title>
            <meta name="description" content="Register page description" />
        </Head>

        <form onSubmit={submit} method='POST'>

        {/* ชื่อ */}
        <div>
          <InputLabel htmlFor="name" value="ชื่อ" />
          <TextInput
            id="name"
            name="name"
            value={data.name}
            className="mt-1 block w-full"
            autoComplete="name"
            onChange={(e) => setData('name', e.target.value)}
          />
          <InputError message={errors.name} className="mt-2" />
        </div>

        {/* อีเมล */}
        <div className="mt-4">
          <InputLabel htmlFor="email" value="อีเมล" />
          <TextInput
            id="email"
            type="text"
            name="email"
            value={data.email}
            className="mt-1 block w-full"
            onChange={(e) => setData('email', e.target.value)}
          />
          <InputError message={errors.email} className="mt-2" />
        </div>

        {/* ชื่อผู้ใช้งาน */}
        <div className="mt-4">
          <InputLabel htmlFor="username" value="ชื่อผู้ใช้งาน" />
          <TextInput
            id="username"
            type="text"
            name="username"
            value={data.username}
            className="mt-1 block w-full"
            onChange={(e) => setData('username', e.target.value)}
          />
          <InputError message={errors.username} className="mt-2" />
        </div>

        {/* รหัสผ่าน */}
        <div className="mt-4">
          <InputLabel htmlFor="password" value="รหัสผ่าน" />
          <TextInput
            id="password"
            type="password"
            name="password"
            value={data.password}
            className="mt-1 block w-full"
            onChange={(e) => setData('password', e.target.value)}
          />
          <InputError message={errors.password} className="mt-2" />
        </div>

        <div className="mt-4">
          <InputLabel htmlFor="password_confirmation" value="ยืนยันรหัสผ่าน" />
          <TextInput
            id="password_confirmation"
            type="password"
            name="password_confirmation"
            value={data.password_confirmation}
            className="mt-1 block w-full"
            onChange={(e) => setData('password_confirmation', e.target.value)}
          />
          <InputError message={errors.password_confirmation} className="mt-2" />
        </div>

        <div className="mt-4">
          <label className="flex items-center">
            <input
              type="checkbox"
              name="terms-of-service"
              id="terms-of-service"
              checked={data['terms-of-service'] as boolean}
              onChange={(e) => setData('terms-of-service', e.target.checked)}
              className="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500"
            />
            <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">
              ยอมรับ <a href="/terms-of-service" className="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">
                ข้อกำหนดและเงื่อนไขการใช้งาน
              </a>
            </span>
          </label>
          <InputError message={errors['terms-of-service']} className="mt-2" />
        </div>

        <div className="flex items-center justify-end mt-4">
          <Link
            href={route('login')}
            className="text-sm text-gray-600 dark:text-gray-400 dark:hover:text-gray-300 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 mr-4"
          >
            มีบัญชีอยู่แล้ว?
          </Link>

          <button
            type="submit"
            className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150 ml-4 hover:cursor-pointer"
            disabled={processing}
          >
            ลงทะเบียน
          </button>
        </div>

        </form>
    </GuestLayout>
  )
}

Step 11: สร้างไฟล์ LoginRequest.php
---
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Support\Str;
use Illuminate\Auth\Events\Lockout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{

    // ฟังก์ชัน authorize() จะใช้เพื่อกำหนดว่า request นี้สามารถทำได้หรือไม่ โดยจะ return true เสมอ
    public function authorize(): bool
    {
        return true;
    }

    // ฟังก์ชัน rules() จะใช้เพื่อกำหนดกฎการตรวจสอบข้อมูลที่ผู้ใช้กรอกเข้ามาในฟอร์มเข้าสู่ระบบ
    // โดยจะตรวจสอบว่า email และ password ที่กรอกมาถูกต้องหรือไม่
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email', 'exists:users,email'],
            'password' => ['required', 'string'],
        ];
    }

    // ฟังก์ชัน authenticate() จะใช้เพื่อทำการตรวจสอบข้อมูลการเข้าสู่ระบบของผู้ใช้ โดยจะทำการตรวจสอบว่า email และ password ที่กรอกมาถูกต้องหรือไม่
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    // ฟังก์ชันนี้จะใช้เพื่อกำหนดว่า request นี้สามารถทำได้หรือไม่ โดยตรวจสอบว่ามีการ login เกินจำนวนที่กำหนดหรือไม่
    public function ensureIsNotRateLimited(): void
    {
        // ตรวจสอบว่า request นี้มีการ login เกินจำนวนที่กำหนดหรือไม่
        // ถ้ามีการ login เกินจำนวนที่กำหนด จะทำการส่ง event Lockout และ throw ValidationException
        // ถ้าไม่เกินจำนวนที่กำหนด จะ return ออกไป
        // RateLimiter::tooManyAttempts($this->throttleKey(), 5) หมายถึงว่า ถ้ามีการ login เกิน 5 ครั้งใน 1 นาที จะถือว่ามีการ login เกินจำนวนที่กำหนด
        if (!RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', ['seconds' => $seconds]),
        ]);
    }

    // ฟังก์ชันนี้ throttleKey() จะใช้เพื่อสร้าง key สำหรับการ throttle โดยจะใช้ email และ ip address ของผู้ใช้ในการสร้าง key
    public function throttleKey()
    {
        return Str::lower($this->input('email')) . '|' . $this->ip();
    }
}

---
Step 12: สร้าง AuthenticatedSessionController.php สำหรับการทำ login
---
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;
use Inertia\Response;

class AuthenticatedSessionController extends Controller
{
    /**
     * แสดงฟอร์มเข้าสู่ระบบ
     *
     * @return \Inertia\Response
    */
    public function create(): Response
    {
        // ส่งฟอร์มเข้าสู่ระบบไปยัง view 'Auth/Login'
        // โดยใช้ Inertia เพื่อสร้าง response ที่เป็น JSON และส่งไปยัง client
        return Inertia::render('Auth/Login');
    }


    /**
     * บันทึกข้อมูลการเข้าสู่ระบบ
     *
     * @param  \App\Http\Requests\Auth\LoginRequest  $request
     * @return \Illuminate\Http\RedirectResponse
    */
    public function store(LoginRequest $request): RedirectResponse
    {
        // ตรวจสอบข้อมูลการเข้าสู่ระบบของผู้ใช้
        $request->authenticate();

        // ลบข้อมูลการเข้าสู่ระบบเก่าใน session
        $request->session()->regenerate();

        // เปลี่ยนเส้นทางไปยังหน้า dashboard หรือหน้าที่คุณต้องการหลังจากเข้าสู่ระบบ
        // ในที่นี้เราจะเปลี่ยนเส้นทางไปยังหน้า dashboard
        return redirect()->route('dashboard');
    }


    /**
     * ออกจากระบบ
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
    */
    public function destroy(Request $request): RedirectResponse
    {
        // เมื่อคุณเรียกใช้ Auth::logout() โดยไม่ระบุ guard Laravel จะใช้ guard เริ่มต้นที่กำหนดไว้ในไฟล์ config/auth.php ซึ่งโดยทั่วไปคือ 'web' อยู่แล้ว
        Auth::logout();

        // ลบข้อมูลการเข้าสู่ระบบของผู้ใช้ใน session
        $request->session()->invalidate();

        // สร้าง token ใหม่สำหรับ session เพื่อป้องกันการโจมตี CSRF (Cross-Site Request Forgery)
        $request->session()->regenerateToken();

        // เปลี่ยนเส้นทางไปยังหน้าแรกหรือหน้าที่คุณต้องการหลังจากออกจากระบบ
        // ในที่นี้เราจะเปลี่ยนเส้นทางไปยังหน้า login
        return redirect()->route('login');
    }
}

---
Step 13: เพิ่ม Route ที่ไฟล์ 
\routes\auth.php\auth.php
----
<?php
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\AuthenticatedSessionController;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| เส้นทางสำหรับผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบ (Guest Routes)
|--------------------------------------------------------------------------
|
| เส้นทางในกลุ่มนี้จะใช้ middleware 'guest' ซึ่งจะอนุญาตให้เข้าถึงได้
| เฉพาะผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบเท่านั้น หากผู้ใช้เข้าสู่ระบบแล้ว
| จะถูกเปลี่ยนเส้นทางไปยังหน้าหลัก
|
*/

Route::middleware('guest')->group(function () {
    
    // การลงทะเบียนผู้ใช้ใหม่
    Route::get('register', [RegisteredUserController::class, 'create'])->name('register');  // แสดงฟอร์มลงทะเบียน
    Route::post('register', [RegisteredUserController::class, 'store']);  // บันทึกข้อมูลผู้ใช้ใหม่

    // การเข้าสู่ระบบ
    Route::get('login', [AuthenticatedSessionController::class, 'create'])->name('login');  // แสดงฟอร์มเข้าสู่ระบบ
    Route::post('login', [AuthenticatedSessionController::class, 'store']);  // ตรวจสอบและสร้างเซสชันการเข้าสู่ระบบ
     
});

---
Step 14: แก้ไขไฟล์ Login.tsx
resources\js\pages\Auth\Login.tsx
----
รันคำสั่ง php artisan cache:table เพื่อสร้างไฟล์ migration สำหรับตาราง cache

จากนั้นรันคำสั่ง php artisan migrate เพื่อสร้างตาราง cache ในฐานข้อมูล

แก้ไขหน้า Login.tsx
---
import { useEffect, FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import InputError from '@/Components/InputError'
import InputLabel from '@/Components/InputLabel'
import TextInput from '@/Components/TextInput'

interface LoginForm {
  email: string
  password: string
  remember: boolean
  [key: string]: string | boolean
}

export default function Login({ status }: { status?: string }) {

  // ใช้ useForm hook เพื่อจัดการฟอร์ม
  const { data, setData, post, processing, errors, reset } = useForm<LoginForm>({
    email: '',
    password: '',
    remember: false,
  })

  // ใช้ useEffect hook เพื่อรีเซ็ตฟอร์มเมื่อคอมโพเนนต์ถูกสร้างขึ้น
  useEffect(() => {
    return () => {
      reset('password')
    }
  }, [])

  // ฟังก์ชันสำหรับ submit ฟอร์ม
  const submit: FormEventHandler = (e) => {
    e.preventDefault()
    post(route('login'))
  }

  return (
    <GuestLayout>

        <Head>
            <title>เข้าสู่ระบบ</title>
            <meta name="description" content="Login page description" />
        </Head>

        {status && (
          <div className="mb-4 font-medium text-sm text-green-600">
            {status}
          </div>
        )}

        <form onSubmit={submit} method='POST'>

          <div>
            <InputLabel htmlFor="email" value="อีเมล" />
            <TextInput
              id="email"
              type="text"
              name="email"
              value={data.email}
              className="mt-1 block w-full"
              onChange={(e) => setData('email', e.target.value)}
            />
            <InputError message={errors.email} className="mt-2" />
          </div>

          <div className="mt-4">
            <InputLabel htmlFor="password" value="รหัสผ่าน" />
            <TextInput
              id="password"
              type="password"
              name="password"
              value={data.password}
              className="mt-1 block w-full"
              onChange={(e) => setData('password', e.target.value)}
            />
            <InputError message={errors.password} className="mt-2" />
          </div>

          <div className="flex items-center justify-between mt-4 mb-8">
            <label className="flex items-center">
              <input
                type="checkbox"
                name="remember"
                checked={data.remember}
                onChange={(e) => setData('remember', e.target.checked)}
                className="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500"
              />
              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400 dark:hover:text-gray-300">จดจำฉัน</span>
            </label>

            <Link
              href={route('forgotpassword')}
              className="text-sm text-gray-600 dark:text-gray-400 dark:hover:text-gray-300 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                ลืมรหัสผ่าน?
              </Link>
          </div>

          <div className="flex items-center justify-end mt-4">
              <Link
                href={route('register')}
                className="text-sm text-gray-600 dark:text-gray-400 dark:hover:text-gray-300 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 mr-4"
              >
              ลงทะเบียน
            </Link>

            <button
              type="submit"
              className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150 ml-4 hover:cursor-pointer"
              disabled={processing}
            >
              เข้าสู่ระบบ
            </button>
          </div>

        </form>
    </GuestLayout>
  )
}

---
Step 15: เพิ่ม route ที่ไฟล์ auth.php
---
<?php
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| เส้นทางสำหรับผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบ (Guest Routes)
|--------------------------------------------------------------------------
|
| เส้นทางในกลุ่มนี้จะใช้ middleware 'guest' ซึ่งจะอนุญาตให้เข้าถึงได้
| เฉพาะผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบเท่านั้น หากผู้ใช้เข้าสู่ระบบแล้ว
| จะถูกเปลี่ยนเส้นทางไปยังหน้าหลัก
|
*/

Route::middleware('guest')->group(function () {
    
    // การลงทะเบียนผู้ใช้ใหม่
    Route::get('register', [RegisteredUserController::class, 'create'])->name('register');  // แสดงฟอร์มลงทะเบียน
    Route::post('register', [RegisteredUserController::class, 'store']);  // บันทึกข้อมูลผู้ใช้ใหม่

    // การเข้าสู่ระบบ
    Route::get('login', [AuthenticatedSessionController::class, 'create'])->name('login');  // แสดงฟอร์มเข้าสู่ระบบ
    Route::post('login', [AuthenticatedSessionController::class, 'store']);  // ตรวจสอบและสร้างเซสชันการเข้าสู่ระบบ

    // การขอรีเซ็ตรหัสผ่าน
    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])->name('password.request');  // แสดงฟอร์มขอรีเซ็ตรหัสผ่าน
    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])->name('password.email');  // ส่งอีเมลลิงก์รีเซ็ตรหัสผ่าน
     
});

---
Step 16: สร้าง Controller "PasswordResetLinkController.php"
---
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Inertia\Inertia;
use Inertia\Response;
use Illuminate\Support\Str;

class PasswordResetLinkController extends Controller
{
    /**
     * แสดงฟอร์มขอรีเซ็ตรหัสผ่าน
     */
    public function create(): Response
    {
        return Inertia::render('Auth/ForgotPassword', [
            'status' => session('status'),
        ]);
    }

    /**
     * ส่งลิงก์รีเซ็ตรหัสผ่านไปยังอีเมลของผู้ใช้
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => 'required|email',
        ]);

        // เราจะใช้ Password::sendResetLink เพื่อส่งลิงก์รีเซ็ตรหัสผ่านไปยังอีเมลของผู้ใช้
        // หากส่งสำเร็จ เราจะส่งกลับไปยังหน้าฟอร์มพร้อมกับข้อความสถานะ
        // หากไม่สำเร็จ เราจะส่งกลับไปยังหน้าฟอร์มพร้อมกับข้อความแสดงข้อผิดพลาด
        $status = Password::sendResetLink(
            $request->only('email')
        );

        if ($status === Password::RESET_LINK_SENT) {
            return back()->with('status', __('auth.passwords.sent'));
        }

        // ในกรณีที่ไม่พบอีเมล หรือเกิดข้อผิดพลาดอื่นๆ
        $key = Str::lower(str_replace('passwords.', '', $status));
        return back()
            ->withInput($request->only('email'))
            ->withErrors(['email' => __("auth.passwords.{$key}")]);
    }
}

---
Step 17: แก้ไขหน้า ForgotPassword.tsx
---
import { FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import InputError from '@/Components/InputError'
import InputLabel from '@/Components/InputLabel'
import TextInput from '@/Components/TextInput'

interface ForgotPasswordForm {
  email: string
  [key: string]: string
}

export default function ForgotPassword({ status }: { status?: string }) {

  // ใช้ useForm hook เพื่อจัดการฟอร์ม
  const { data, setData, post, processing, errors } = useForm<ForgotPasswordForm>({
    email: '',
  })

  // ฟังก์ชันสำหรับ submit ฟอร์ม
  const submit: FormEventHandler = (e) => {
    e.preventDefault()
    post(route('password.email'))
  }

  return (
    <GuestLayout>
      <Head title="ลืมรหัสผ่าน" />
      
      <div className="mb-4 text-center">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">ลืมรหัสผ่าน</h1>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">ระบุอีเมลของคุณเพื่อรีเซ็ตรหัสผ่าน</p>
      </div>

      {status && (
        <div className="mb-4 text-sm font-medium text-green-600 dark:text-green-400">
          {status}
        </div>
      )}

      <form onSubmit={submit} method="POST">
        <div>
          <InputLabel htmlFor="email" value="อีเมล" />

          <TextInput
            id="email"
            type="text"
            name="email"
            value={data.email}
            className="mt-1 block w-full"
            onChange={(e) => setData('email', e.target.value)}
            autoFocus
          />

          <InputError message={errors.email} className="mt-2" />
        </div>

        <div className="flex items-center justify-between mt-4">
          <Link
            href={route('login')}
            className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            กลับไปหน้าเข้าสู่ระบบ
          </Link>

          <button 
            type="submit" 
            className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150"
            disabled={processing}
          >
            ส่งลิงก์รีเซ็ตรหัสผ่าน
          </button>
        </div>
      </form>
    </GuestLayout>
  )
} 

---
Step 18: ติดตั้งโปรแกรมในการส่ง-รับเมล์ใน local
----
ใช้โปรแกรมชื่อ MailPit
https://github.com/axllent/mailpit/releases/tag/v1.24.0

รันโปรกรม mailpit
---
macos -> ./mailpit
windows -> mailpit.exe

---
Step 19: แก้ไขไฟล์ .env เพื่อกำหนดค่า smtp mail
---
#MailPit
MAIL_MAILER=smtp
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

---
Step 20: แก้ไข route ทีไฟล์ auth.php เพื่อเพิ่ม password-reset
---
<?php
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\NewPasswordController;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| เส้นทางสำหรับผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบ (Guest Routes)
|--------------------------------------------------------------------------
|
| เส้นทางในกลุ่มนี้จะใช้ middleware 'guest' ซึ่งจะอนุญาตให้เข้าถึงได้
| เฉพาะผู้ใช้ที่ยังไม่ได้เข้าสู่ระบบเท่านั้น หากผู้ใช้เข้าสู่ระบบแล้ว
| จะถูกเปลี่ยนเส้นทางไปยังหน้าหลัก
|
*/

Route::middleware('guest')->group(function () {
    
    // การลงทะเบียนผู้ใช้ใหม่
    Route::get('register', [RegisteredUserController::class, 'create'])->name('register');  // แสดงฟอร์มลงทะเบียน
    Route::post('register', [RegisteredUserController::class, 'store']);  // บันทึกข้อมูลผู้ใช้ใหม่

    // การเข้าสู่ระบบ
    Route::get('login', [AuthenticatedSessionController::class, 'create'])->name('login');  // แสดงฟอร์มเข้าสู่ระบบ
    Route::post('login', [AuthenticatedSessionController::class, 'store']);  // ตรวจสอบและสร้างเซสชันการเข้าสู่ระบบ

    // การขอรีเซ็ตรหัสผ่าน
    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])->name('password.request');  // แสดงฟอร์มขอรีเซ็ตรหัสผ่าน
    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])->name('password.email');  // ส่งอีเมลลิงก์รีเซ็ตรหัสผ่าน

    // การรีเซ็ตรหัสผ่าน
    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])->name('password.reset');  // แสดงฟอร์มรีเซ็ตรหัสผ่านพร้อมโทเค็น
    Route::post('reset-password', [NewPasswordController::class, 'store'])->name('password.store');  // บันทึกรหัสผ่านใหม่
     
});

---
Step 21: ทำการสร้าง Controller "NewPasswordController.php"
----
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\Validation\ValidationException;
use Inertia\Inertia;
use Inertia\Response;

class NewPasswordController extends Controller
{
    /**
     * แสดงฟอร์มรีเซ็ตรหัสผ่าน
     */
    public function create(Request $request): Response
    {
        return Inertia::render('Auth/ResetPassword', [
            'email' => $request->email,
            'token' => $request->route('token'),
        ]);
    }

    /**
     * บันทึกรหัสผ่านใหม่
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => 'required',
            'email' => 'required|email',
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // เราจะใช้ Password::reset เพื่อรีเซ็ตรหัสผ่านของผู้ใช้
        // หากรีเซ็ตรหัสผ่านสำเร็จ เราจะส่งกลับไปยังหน้าฟอร์มเข้าสู่ระบบ
        // หากไม่สำเร็จ เราจะส่งกลับไปยังหน้าฟอร์มพร้อมกับข้อความแสดงข้อผิดพลาด
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // ถ้ารีเซ็ตรหัสผ่านสำเร็จ เราจะส่งกลับไปยังหน้าฟอร์มเข้าสู่ระบบ
        // หากไม่สำเร็จ เราจะส่งกลับไปยังหน้าฟอร์มพร้อมกับข้อความแสดงข้อผิดพลาด
        // หากสถานะไม่ใช่ PASSWORD_RESET เราจะโยน ValidationException
        if ($status != Password::PASSWORD_RESET) {
            throw ValidationException::withMessages([
                'email' => [__($status)],
            ]);
        }

        return redirect()->route('login')->with('status', __($status));
    }
}

---
Step 22: แก้ไขไฟล์ ResetPassword.tsx
---
import { FormEventHandler } from 'react'
import { Head, Link, useForm } from '@inertiajs/react'
import GuestLayout from '@/Layouts/GuestLayout'
import InputError from '@/Components/InputError'
import InputLabel from '@/Components/InputLabel'
import TextInput from '@/Components/TextInput'

interface ResetPasswordForm {
  token: string
  email: string
  password: string
  password_confirmation: string
  [key: string]: string
}

export default function ResetPassword({ token, email }: { token: string, email: string }) {
  const { data, setData, post, processing, errors, reset } = useForm<ResetPasswordForm>({
    token,
    email,
    password: '',
    password_confirmation: '',
  })

  const submit: FormEventHandler = (e) => {
    e.preventDefault()
    post(route('password.store'))
  }

  return (
    <GuestLayout>
      <Head title="รีเซ็ตรหัสผ่าน" />
      
      <div className="mb-4 text-center">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">รีเซ็ตรหัสผ่าน</h1>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">กำหนดรหัสผ่านใหม่สำหรับบัญชีของคุณ</p>
      </div>

      <form onSubmit={submit}>
        <div>
          <InputLabel htmlFor="email" value="อีเมล" />
          <TextInput
            id="email"
            type="email"
            name="email"
            value={data.email}
            className="mt-1 block w-full"
            onChange={(e) => setData('email', e.target.value)}
            required
            autoComplete="username"
            readOnly
          />
          <InputError message={errors.email} className="mt-2" />
        </div>

        <div className="mt-4">
          <InputLabel htmlFor="password" value="รหัสผ่านใหม่" />
          <TextInput
            id="password"
            type="password"
            name="password"
            value={data.password}
            className="mt-1 block w-full"
            autoComplete="new-password"
            onChange={(e) => setData('password', e.target.value)}
          />
          <InputError message={errors.password} className="mt-2" />
        </div>

        <div className="mt-4">
          <InputLabel htmlFor="password_confirmation" value="ยืนยันรหัสผ่านใหม่" />
          <TextInput
            id="password_confirmation"
            type="password"
            name="password_confirmation"
            value={data.password_confirmation}
            className="mt-1 block w-full"
            autoComplete="new-password"
            onChange={(e) => setData('password_confirmation', e.target.value)}
          />
          <InputError message={errors.password_confirmation} className="mt-2" />
        </div>

        <div className="flex items-center justify-between mt-4">
          <Link
            href={route('login')}
            className="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            กลับไปหน้าเข้าสู่ระบบ
          </Link>

          <button 
            type="submit" 
            className="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 focus:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150"
            disabled={processing}
          >
            รีเซ็ตรหัสผ่าน
          </button>
        </div>
      </form>
    </GuestLayout>
  )
} 

Step 23: xxx